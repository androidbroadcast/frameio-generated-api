/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.apis

import dev.androidbroadcast.framesdk.models.CreateWebhookForTeamRequest
import dev.androidbroadcast.framesdk.models.HTTPError
import dev.androidbroadcast.framesdk.models.Webhook

import dev.androidbroadcast.framesdk.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class WebhooksApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Create team webhook
     * Create an outbound Webhook for all appropriate actions for a given Team
     * @param teamId 
     * @param createWebhookForTeamRequest Webhook to create or update (optional)
     * @return Webhook
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createWebhookForTeam(teamId: kotlin.String, createWebhookForTeamRequest: CreateWebhookForTeamRequest? = null): HttpResponse<Webhook> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = createWebhookForTeamRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/teams/{team_id}/hooks".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Delete webhook
     * Delete a given Webhook via its ID
     * @param hookId Webhook ID
     * @return Webhook
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteWebhook(hookId: kotlin.String): HttpResponse<Webhook> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v2/hooks/{hook_id}".replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Webhook by ID
     * Get the information about a given Webhook
     * @param hookId Webhook ID
     * @return Webhook
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getWebhook(hookId: kotlin.String): HttpResponse<Webhook> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/hooks/{hook_id}".replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Webhooks for Account
     * Get Webhooks belonging to a given Account
     * @param accountId Account ID
     * @return kotlin.collections.List<Webhook>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getWebhooksByAccount(accountId: kotlin.String): HttpResponse<kotlin.collections.List<Webhook>> {

        val localVariableAuthNames = listOf<String>("JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/accounts/{account_id}/hooks".replace("{" + "account_id" + "}", "$accountId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetWebhooksByAccountResponse>().map { value }
    }

    @Serializable(GetWebhooksByAccountResponse.Companion::class)
    private class GetWebhooksByAccountResponse(val value: List<Webhook>) {
        companion object : KSerializer<GetWebhooksByAccountResponse> {
            private val serializer: KSerializer<List<Webhook>> = serializer<List<Webhook>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetWebhooksByAccountResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetWebhooksByAccountResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Update webhook
     * Update the settings for a given Webhook via its ID
     * @param hookId Webhook ID
     * @param createWebhookForTeamRequest Webhook to create or update (optional)
     * @return Webhook
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateWebhook(hookId: kotlin.String, createWebhookForTeamRequest: CreateWebhookForTeamRequest? = null): HttpResponse<Webhook> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = createWebhookForTeamRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v2/hooks/{hook_id}".replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
