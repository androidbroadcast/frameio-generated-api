/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.apis

import dev.androidbroadcast.framesdk.models.Action
import dev.androidbroadcast.framesdk.models.CreateActionForTeamRequest
import dev.androidbroadcast.framesdk.models.HTTPError

import dev.androidbroadcast.framesdk.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class CustomActionsApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Create a Custom Action
     * Create a Custom Action belonging to A Team
     * @param teamId Team ID
     * @param createActionForTeamRequest Action to create or update (optional)
     * @return Action
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createActionForTeam(teamId: kotlin.String, createActionForTeamRequest: CreateActionForTeamRequest? = null): HttpResponse<Action> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = createActionForTeamRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/teams/{team_id}/actions".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Delete a Custom Action
     * Delete a given Custom Action via its ID
     * @param actionId Custom Action ID
     * @return Action
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteAction(actionId: kotlin.String): HttpResponse<Action> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v2/actions/{action_id}".replace("{" + "action_id" + "}", "$actionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get a Custom Action by ID
     * Get a Custom Action via its ID
     * @param actionId Custom Action ID
     * @return Action
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAction(actionId: kotlin.String): HttpResponse<Action> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/actions/{action_id}".replace("{" + "action_id" + "}", "$actionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Custom Actions for an Account or Team
     * Get Custom Actions available to a given Account
     * @param accountId Account ID
     * @param include  (optional)
     * @return kotlin.collections.List<Action>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getActionsByAccount(accountId: kotlin.String, include: kotlin.String? = null): HttpResponse<kotlin.collections.List<Action>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        include?.apply { localVariableQuery["include"] = listOf("$include") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/accounts/{account_id}/actions".replace("{" + "account_id" + "}", "$accountId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetActionsByAccountResponse>().map { value }
    }

    @Serializable(GetActionsByAccountResponse.Companion::class)
    private class GetActionsByAccountResponse(val value: List<Action>) {
        companion object : KSerializer<GetActionsByAccountResponse> {
            private val serializer: KSerializer<List<Action>> = serializer<List<Action>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetActionsByAccountResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetActionsByAccountResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get Custom Actions for a given Team
     * Fetch Custom Actions belonging to a given Team
     * @param teamId Team ID
     * @param include  (optional)
     * @return kotlin.collections.List<Action>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getActionsByTeam(teamId: kotlin.String, include: kotlin.String? = null): HttpResponse<kotlin.collections.List<Action>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        include?.apply { localVariableQuery["include"] = listOf("$include") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/teams/{team_id}/actions".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetActionsByTeamResponse>().map { value }
    }

    @Serializable(GetActionsByTeamResponse.Companion::class)
    private class GetActionsByTeamResponse(val value: List<Action>) {
        companion object : KSerializer<GetActionsByTeamResponse> {
            private val serializer: KSerializer<List<Action>> = serializer<List<Action>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetActionsByTeamResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetActionsByTeamResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Update a Custom Action
     * Update a given Custom Action via its ID
     * @param actionId Custom Action ID
     * @param createActionForTeamRequest Action to create or update (optional)
     * @return Action
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateAction(actionId: kotlin.String, createActionForTeamRequest: CreateActionForTeamRequest? = null): HttpResponse<Action> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = createActionForTeamRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v2/actions/{action_id}".replace("{" + "action_id" + "}", "$actionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
