/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.apis

import dev.androidbroadcast.framesdk.models.AuthDeviceConfirmDevice200Response
import dev.androidbroadcast.framesdk.models.AuthDeviceConfirmDevice400Response
import dev.androidbroadcast.framesdk.models.DeviceRequestCode200Response

import dev.androidbroadcast.framesdk.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class AuthorizationApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)


    /**
     * enum for parameter grantType
     */
    @Serializable
    enum class GrantTypeAuthDeviceConfirmDevice(val value: kotlin.String) {
        
        @SerialName(value = "urn:ietf:params:oauth:grant-type:device_code")
        urnColonIetfColonParamsColonOauthColonGrantMinusTypeColonDevice_code("urn:ietf:params:oauth:grant-type:device_code")
        
    }

    /**
     * Polling for Device Authorization
     * Once we have handed the pairing code to the user, we need to check and see if they&#39;ve entered it. To do so, we can make the following request.
     * @param grantType The type of authorization grant our OAuth system is issuing.
     * @param clientId The unique device id, such as the device serial number. Must be the same as the client id used on the initiation request.
     * @param deviceCode The unique &#x60;device_code&#x60; generated by the server for this authorization attempt. Returned from the initiation request.
     * @param xClientVersion Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/ (optional, default to "0.0.0")
     * @return AuthDeviceConfirmDevice200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authDeviceConfirmDevice(grantType: GrantTypeAuthDeviceConfirmDevice, clientId: kotlin.String, deviceCode: kotlin.String, xClientVersion: kotlin.String? = "0.0.0"): HttpResponse<AuthDeviceConfirmDevice200Response> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            formData {
                grantType?.apply { append("grant_type", grantType) }
                clientId?.apply { append("client_id", clientId) }
                deviceCode?.apply { append("device_code", deviceCode) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        xClientVersion?.apply { localVariableHeaders["x-client-version"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/auth/token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * enum for parameter grantType
     */
    @Serializable
    enum class GrantTypeAuthDeviceRefreshToken(val value: kotlin.String) {
        
        @SerialName(value = "refresh_token")
        refresh_token("refresh_token")
        
    }

    /**
     * Refresh Device Token
     * Refresh your devices token
     * @param clientId Must be a unique identifier per hardware device, such as a unique hardware serial number. Must be the same as the client id used on initial authorization.
     * @param clientSecret A static string, provided by Frame.io to be embedded for a device manufacturer/model. Acts as an identifier within Frame.io.
     * @param grantType Grant type
     * @param refreshTokem A valid &#x60;refresh_token&#x60;, from a previous authorization. Refresh tokens are valid for 14 days from issuance. This is received after the initial authorization and will receive a new &#x60;refresh-token&#x60; after every refresh.
     * @return void
     */
    open suspend fun authDeviceRefreshToken(clientId: kotlin.String, clientSecret: kotlin.String, grantType: GrantTypeAuthDeviceRefreshToken, refreshTokem: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            formData {
                clientId?.apply { append("client_id", clientId) }
                clientSecret?.apply { append("client_secret", clientSecret) }
                grantType?.apply { append("grant_type", grantType) }
                refreshTokem?.apply { append("refresh_tokem", refreshTokem) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/auth/token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Revoke Device Authorization
     * Revoke device authorization
     * @param xClientVersion Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/ (optional, default to "0.0.0")
     * @param clientId Must be a unique identifier per hardware device, such as a unique hardware serial number. Must be the same &#x60;client_id&#x60; used on initial authorization. (optional)
     * @param clientSecret A static string, provided by Frame.io to be embedded for a device manufacturer/model. Acts as an identifier within Frame.io. (optional)
     * @param token  (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun authDeviceRevokeToken(xClientVersion: kotlin.String? = "0.0.0", clientId: kotlin.String? = null, clientSecret: kotlin.String? = null, token: kotlin.String? = null): HttpResponse<kotlin.String> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            formData {
                clientId?.apply { append("client_id", clientId) }
                clientSecret?.apply { append("client_secret", clientSecret) }
                token?.apply { append("token", token) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        xClientVersion?.apply { localVariableHeaders["x-client-version"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/auth/revoke",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * enum for parameter scope
     */
    @Serializable
    enum class ScopeDeviceRequestCode(val value: kotlin.String) {
        
        @SerialName(value = "asset_create")
        asset_create("asset_create"),
        
        @SerialName(value = "offline")
        offline("offline")
        
    }

    /**
     * Request device code
     * 
     * @param clientId A unique identifier for the physical hardware device. This value needs to be guaranteed to be unique for the device. This could be a serial number or a randomly generated UUID.
     * @param clientSecret This will be issued to you by Frame.io support and identifies the your device model. This value should be kept secret from the user, and should be encrypted at rest
     * @param scope The permissions we are requesting, with spaces used as delimiters. Hardware devices can only request the following two scopes
     * @param xClientVersion Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/ (optional, default to "0.0.0")
     * @return DeviceRequestCode200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deviceRequestCode(clientId: kotlin.String, clientSecret: kotlin.String, scope: ScopeDeviceRequestCode, xClientVersion: kotlin.String? = "0.0.0"): HttpResponse<DeviceRequestCode200Response> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            formData {
                clientId?.apply { append("client_id", clientId) }
                clientSecret?.apply { append("client_secret", clientSecret) }
                scope?.apply { append("scope", scope) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        xClientVersion?.apply { localVariableHeaders["x-client-version"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/device/code",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
