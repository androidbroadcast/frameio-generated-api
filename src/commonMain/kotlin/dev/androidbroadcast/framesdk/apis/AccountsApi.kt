/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.apis

import dev.androidbroadcast.framesdk.models.Account
import dev.androidbroadcast.framesdk.models.AccountMembership
import dev.androidbroadcast.framesdk.models.DeviceListAccounts200ResponseInner
import dev.androidbroadcast.framesdk.models.HTTPError
import dev.androidbroadcast.framesdk.models.ProjectDeviceAuthorization

import dev.androidbroadcast.framesdk.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class AccountsApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Device Information
     * Fetches information about the current device connection.   Can be used to verify authorization token and returns information useful to present useful information in your user interface.
     * @param xClientVersion Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/ (optional, default to "0.0.0")
     * @return ProjectDeviceAuthorization
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deviceIdentify(xClientVersion: kotlin.String? = "0.0.0"): HttpResponse<ProjectDeviceAuthorization> {

        val localVariableAuthNames = listOf<String>("C2CDeviceAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        xClientVersion?.apply { localVariableHeaders["x-client-version"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/devices/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * List accounts
     * List available accounts to pair your C2C device with.
     * @param xClientVersion Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/ (optional, default to "0.0.0")
     * @return kotlin.collections.Set<DeviceListAccounts200ResponseInner>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deviceListAccounts(xClientVersion: kotlin.String? = "0.0.0"): HttpResponse<kotlin.collections.Set<DeviceListAccounts200ResponseInner>> {

        val localVariableAuthNames = listOf<String>("C2COAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()
        xClientVersion?.apply { localVariableHeaders["x-client-version"] = this.toString() }

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/devices/accounts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<DeviceListAccountsResponse>().map { value }
    }

    @Serializable(DeviceListAccountsResponse.Companion::class)
    private class DeviceListAccountsResponse(val value: List<DeviceListAccounts200ResponseInner>) {
        companion object : KSerializer<DeviceListAccountsResponse> {
            private val serializer: KSerializer<List<DeviceListAccounts200ResponseInner>> = serializer<List<DeviceListAccounts200ResponseInner>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: DeviceListAccountsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = DeviceListAccountsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get Account
     * Fetch a particular account by ID
     * @param accountId Account ID
     * @return Account
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAccount(accountId: kotlin.String): HttpResponse<Account> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/accounts/{account_id}".replace("{" + "account_id" + "}", "$accountId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Account membership
     * Get the membership status for the auth token making the request
     * @param accountId Account ID
     * @return AccountMembership
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAccountMembership(accountId: kotlin.String): HttpResponse<AccountMembership> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/accounts/{account_id}/membership".replace("{" + "account_id" + "}", "$accountId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Accounts for User
     * Fetch all Accounts that a given User has access to
     * @return kotlin.collections.List<Account>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAccounts(): HttpResponse<kotlin.collections.List<Account>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/accounts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetAccountsResponse>().map { value }
    }

    @Serializable(GetAccountsResponse.Companion::class)
    private class GetAccountsResponse(val value: List<Account>) {
        companion object : KSerializer<GetAccountsResponse> {
            private val serializer: KSerializer<List<Account>> = serializer<List<Account>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetAccountsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetAccountsResponse(serializer.deserialize(decoder))
        }
    }

}
