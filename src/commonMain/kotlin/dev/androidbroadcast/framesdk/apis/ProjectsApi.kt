/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.apis

import dev.androidbroadcast.framesdk.models.AddCollaboratorToProjectRequest
import dev.androidbroadcast.framesdk.models.BatchCreateCollaborators200Response
import dev.androidbroadcast.framesdk.models.BatchDeleteCollaboratorsRequest
import dev.androidbroadcast.framesdk.models.BatchInviteParams
import dev.androidbroadcast.framesdk.models.Collaborator
import dev.androidbroadcast.framesdk.models.CreateProjectRequest
import dev.androidbroadcast.framesdk.models.GetProjectCollaborators201ResponseInner
import dev.androidbroadcast.framesdk.models.HTTPError
import dev.androidbroadcast.framesdk.models.Project
import dev.androidbroadcast.framesdk.models.ProjectMembership

import dev.androidbroadcast.framesdk.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class ProjectsApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Add a Collaborator to a Project
     * Add a new Collaborator to a Project
     * @param projectId Project ID
     * @param include Include additional \&quot;pre-loads\&quot; for this resource (optional)
     * @param addCollaboratorToProjectRequest Collaborator to create or update (optional)
     * @return Collaborator
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun addCollaboratorToProject(projectId: kotlin.String, include: kotlin.String? = null, addCollaboratorToProjectRequest: AddCollaboratorToProjectRequest? = null): HttpResponse<Collaborator> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = addCollaboratorToProjectRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        include?.apply { localVariableQuery["include"] = listOf("$include") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/projects/{project_id}/collaborators".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Batch create Collaborators and PendingCollaborators within a Project
     * Submit a list of Collaborators to add to the given Project as Collaborators
     * @param projectId Project ID
     * @param batchInviteParams An array of batch operations (optional)
     * @return BatchCreateCollaborators200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun batchCreateCollaborators(projectId: kotlin.String, batchInviteParams: BatchInviteParams? = null): HttpResponse<BatchCreateCollaborators200Response> {

        val localVariableAuthNames = listOf<String>("JWT")

        val localVariableBody = batchInviteParams

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/batch/projects/{project_id}/collaborators".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Batch delete Collaborators and PendingCollaborators for a Project
     * Submit a list of Collaborators you wish to remove from a given Project
     * @param projectId Project ID
     * @param batchDeleteCollaboratorsRequest  (optional)
     * @return BatchCreateCollaborators200Response
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun batchDeleteCollaborators(projectId: kotlin.String, batchDeleteCollaboratorsRequest: BatchDeleteCollaboratorsRequest? = null): HttpResponse<BatchCreateCollaborators200Response> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = batchDeleteCollaboratorsRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v2/batch/projects/{project_id}/collaborators".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create a Project
     * Create a new Project belonging to a Team
     * @param teamId Team ID
     * @param createProjectRequest Project to create or update (optional)
     * @return Project
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createProject(teamId: kotlin.String, createProjectRequest: CreateProjectRequest? = null): HttpResponse<Project> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = createProjectRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/teams/{team_id}/projects".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Delete Project by ID
     * Delete a Project via its ID
     * @param projectId Project ID
     * @return Project
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun deleteProject(projectId: kotlin.String): HttpResponse<Project> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v2/projects/{project_id}".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Project by ID
     * Fetch a Project via its ID
     * @param projectId Project ID
     * @param include  (optional)
     * @return Project
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getProject(projectId: kotlin.String, include: kotlin.String? = null): HttpResponse<Project> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        include?.apply { localVariableQuery["include"] = listOf("$include") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/projects/{project_id}".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Project Collaborators
     * Fetch the list of Collaborators with access to a Project.
     * @param projectId Project ID
     * @return Project
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getProjectCollaborators(projectId: kotlin.String): HttpResponse<Project> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/projects/{project_id}/collaborators".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get current User(s) membership for a Project
     * Get the Membership context for a given user within a Project via its ID
     * @param projectId Project ID
     * @param userId  (optional)
     * @return ProjectMembership
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getProjectMembership(projectId: kotlin.String, userId: kotlin.String? = null): HttpResponse<ProjectMembership> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        userId?.apply { localVariableQuery["user_id"] = listOf("$userId") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/projects/{project_id}/membership".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get Projects by Team
     * Fetch a paginated list of all Projects belonging to a Team
     * @param teamId Team ID
     * @param filterArchived Add this query param with the value &#x60;all&#x60; to return both archived and non-archived projects (optional)
     * @return kotlin.collections.List<Project>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getProjectsByTeam(teamId: kotlin.String, filterArchived: kotlin.String? = null): HttpResponse<kotlin.collections.List<Project>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        filterArchived?.apply { localVariableQuery["filter[archived]"] = listOf("$filterArchived") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/teams/{team_id}/projects".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetProjectsByTeamResponse>().map { value }
    }

    @Serializable(GetProjectsByTeamResponse.Companion::class)
    private class GetProjectsByTeamResponse(val value: List<Project>) {
        companion object : KSerializer<GetProjectsByTeamResponse> {
            private val serializer: KSerializer<List<Project>> = serializer<List<Project>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetProjectsByTeamResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetProjectsByTeamResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Update a Project
     * Update a Project ID with only the fields provided (overwrite)
     * @param projectId Project ID
     * @param createProjectRequest Project to create or update (optional)
     * @return Project
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateProject(projectId: kotlin.String, createProjectRequest: CreateProjectRequest? = null): HttpResponse<Project> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = createProjectRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v2/projects/{project_id}".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
