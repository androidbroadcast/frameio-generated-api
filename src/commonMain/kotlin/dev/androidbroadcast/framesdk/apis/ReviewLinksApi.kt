/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.apis

import dev.androidbroadcast.framesdk.models.HTTPError
import dev.androidbroadcast.framesdk.models.ReviewLink
import dev.androidbroadcast.framesdk.models.ReviewLinkItem
import dev.androidbroadcast.framesdk.models.ReviewLinkItemsDeleteRequest
import dev.androidbroadcast.framesdk.models.ReviewLinkReviewerInviteRequest

import dev.androidbroadcast.framesdk.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class ReviewLinksApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Create a Review Link
     * Create a new Review Link in a given Project
     * @param projectId Project ID
     * @param reviewLink ReviewLink to create (optional)
     * @return ReviewLink
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reviewLinkCreate(projectId: kotlin.String, reviewLink: ReviewLink? = null): HttpResponse<ReviewLink> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = ReviewLinkCreateRequest(reviewLink)

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/projects/{project_id}/review_links".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    @Serializable(ReviewLinkCreateRequest.Companion::class)
    private class ReviewLinkCreateRequest(val value: Map<kotlin.String, ReviewLink>) {
        companion object : KSerializer<ReviewLinkCreateRequest> {
            private val serializer: KSerializer<Map<kotlin.String, ReviewLink>> = serializer<Map<String, ReviewLink>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: ReviewLinkCreateRequest) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = ReviewLinkCreateRequest(serializer.deserialize(decoder))
        }
    }

    /**
     * Delete a Review Link
     * Delete a given Review Link
     * @param reviewLinkId Review Link ID
     * @return ReviewLink
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reviewLinkDelete(reviewLinkId: kotlin.String): HttpResponse<ReviewLink> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v2/review_links/{review_link_id}".replace("{" + "review_link_id" + "}", "$reviewLinkId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get a Review Link
     * Get a full Review Link manifest
     * @param reviewLinkId Review Link ID
     * @param include  (optional)
     * @return ReviewLink
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reviewLinkGet(reviewLinkId: kotlin.String, include: kotlin.String? = null): HttpResponse<ReviewLink> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        include?.apply { localVariableQuery["include"] = listOf("$include") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/review_links/{review_link_id}".replace("{" + "review_link_id" + "}", "$reviewLinkId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Add Asset to a Review Link
     * Add assets to a Review Link
     * @param reviewLinkId 
     * @param reviewLinkItemsDeleteRequest ReviewLinkItems to create (optional)
     * @return ReviewLink
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reviewLinkItemCreate(reviewLinkId: kotlin.String, reviewLinkItemsDeleteRequest: ReviewLinkItemsDeleteRequest? = null): HttpResponse<ReviewLink> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = reviewLinkItemsDeleteRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/review_links/{review_link_id}/assets".replace("{" + "review_link_id" + "}", "$reviewLinkId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Update Assets in a Review Link
     * Replace the assets on this Review Link
     * @param reviewLinkId 
     * @param reviewLinkItemsDeleteRequest ReviewLinkItems to create (optional)
     * @return ReviewLink
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reviewLinkItemUpdate(reviewLinkId: kotlin.String, reviewLinkItemsDeleteRequest: ReviewLinkItemsDeleteRequest? = null): HttpResponse<ReviewLink> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = reviewLinkItemsDeleteRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v2/review_links/{review_link_id}/assets".replace("{" + "review_link_id" + "}", "$reviewLinkId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Remove items from a Review Link
     * Remove a list of &#x60;asset_id&#x60;s from the assets shared in a Review Link
     * @param reviewLinkId 
     * @param reviewLinkItemsDeleteRequest ReviewLinkItems to delete (optional)
     * @return kotlin.collections.List<ReviewLinkItem>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reviewLinkItemsDelete(reviewLinkId: kotlin.String, reviewLinkItemsDeleteRequest: ReviewLinkItemsDeleteRequest? = null): HttpResponse<kotlin.collections.List<ReviewLinkItem>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = reviewLinkItemsDeleteRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v2/review_links/{review_link_id}/items/shared".replace("{" + "review_link_id" + "}", "$reviewLinkId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ReviewLinkItemsDeleteResponse>().map { value }
    }


    @Serializable(ReviewLinkItemsDeleteResponse.Companion::class)
    private class ReviewLinkItemsDeleteResponse(val value: List<ReviewLinkItem>) {
        companion object : KSerializer<ReviewLinkItemsDeleteResponse> {
            private val serializer: KSerializer<List<ReviewLinkItem>> = serializer<List<ReviewLinkItem>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: ReviewLinkItemsDeleteResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = ReviewLinkItemsDeleteResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get items in a Review Link
     * Fetch the list of items (assets, folders, and version stacks) on a given Review Link
     * @param reviewLinkId 
     * @param include  (optional)
     * @return kotlin.collections.List<ReviewLinkItem>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reviewLinkItemsList(reviewLinkId: kotlin.String, include: kotlin.String? = null): HttpResponse<kotlin.collections.List<ReviewLinkItem>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        include?.apply { localVariableQuery["include"] = listOf("$include") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/review_links/{review_link_id}/items/shared".replace("{" + "review_link_id" + "}", "$reviewLinkId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ReviewLinkItemsListResponse>().map { value }
    }

    @Serializable(ReviewLinkItemsListResponse.Companion::class)
    private class ReviewLinkItemsListResponse(val value: List<ReviewLinkItem>) {
        companion object : KSerializer<ReviewLinkItemsListResponse> {
            private val serializer: KSerializer<List<ReviewLinkItem>> = serializer<List<ReviewLinkItem>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: ReviewLinkItemsListResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = ReviewLinkItemsListResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Remove Reviewers from a Review Link
     * Remove access for a Reviewer to a Review Link
     * @param reviewLinkId 
     * @param reviewLinkItemsDeleteRequest ReviewLinkItems to delete (optional)
     * @return kotlin.collections.List<ReviewLinkItem>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reviewLinkReviewerDelete(reviewLinkId: kotlin.String, reviewLinkItemsDeleteRequest: ReviewLinkItemsDeleteRequest? = null): HttpResponse<kotlin.collections.List<ReviewLinkItem>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = reviewLinkItemsDeleteRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v2/review_links/{review_link_id}/reviewers".replace("{" + "review_link_id" + "}", "$reviewLinkId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ReviewLinkReviewerDeleteResponse>().map { value }
    }


    @Serializable(ReviewLinkReviewerDeleteResponse.Companion::class)
    private class ReviewLinkReviewerDeleteResponse(val value: List<ReviewLinkItem>) {
        companion object : KSerializer<ReviewLinkReviewerDeleteResponse> {
            private val serializer: KSerializer<List<ReviewLinkItem>> = serializer<List<ReviewLinkItem>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: ReviewLinkReviewerDeleteResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = ReviewLinkReviewerDeleteResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Invite Reviewer to a Review Link
     * Invite a Reviewer to a Review Link
     * @param reviewLinkId 
     * @param reviewLinkReviewerInviteRequest ReviewLinkItems to delete (optional)
     * @return kotlin.collections.List<ReviewLinkItem>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reviewLinkReviewerInvite(reviewLinkId: kotlin.String, reviewLinkReviewerInviteRequest: ReviewLinkReviewerInviteRequest? = null): HttpResponse<kotlin.collections.List<ReviewLinkItem>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = reviewLinkReviewerInviteRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v2/review_links/{review_link_id}/reviewers".replace("{" + "review_link_id" + "}", "$reviewLinkId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ReviewLinkReviewerInviteResponse>().map { value }
    }


    @Serializable(ReviewLinkReviewerInviteResponse.Companion::class)
    private class ReviewLinkReviewerInviteResponse(val value: List<ReviewLinkItem>) {
        companion object : KSerializer<ReviewLinkReviewerInviteResponse> {
            private val serializer: KSerializer<List<ReviewLinkItem>> = serializer<List<ReviewLinkItem>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: ReviewLinkReviewerInviteResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = ReviewLinkReviewerInviteResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Update a Review Link
     * Update a Review Links manifest, overwriting any specified key/value pairs
     * @param reviewLinkId Review Link ID
     * @param reviewLink ReviewLink to update (optional)
     * @return ReviewLink
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reviewLinkUpdate(reviewLinkId: kotlin.String, reviewLink: ReviewLink? = null): HttpResponse<ReviewLink> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = reviewLink

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v2/review_links/{review_link_id}".replace("{" + "review_link_id" + "}", "$reviewLinkId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * List Review Links in a project
     * List all the Review Links belonging to a Project
     * @param projectId Project ID
     * @return kotlin.collections.List<ReviewLink>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun reviewLinksList(projectId: kotlin.String): HttpResponse<kotlin.collections.List<ReviewLink>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/projects/{project_id}/review_links".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<ReviewLinksListResponse>().map { value }
    }

    @Serializable(ReviewLinksListResponse.Companion::class)
    private class ReviewLinksListResponse(val value: List<ReviewLink>) {
        companion object : KSerializer<ReviewLinksListResponse> {
            private val serializer: KSerializer<List<ReviewLink>> = serializer<List<ReviewLink>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: ReviewLinksListResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = ReviewLinksListResponse(serializer.deserialize(decoder))
        }
    }

}
