/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.apis

import dev.androidbroadcast.framesdk.models.Audit
import dev.androidbroadcast.framesdk.models.AuditEvent
import dev.androidbroadcast.framesdk.models.HTTPError

import dev.androidbroadcast.framesdk.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class AuditLogsApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)


    /**
     * enum for parameter filtersResourceType
     */
    @Serializable
    enum class FiltersResourceTypeGetAccountAuditLogs(val value: kotlin.String) {
        
        @SerialName(value = "asset")
        asset("asset"),
        
        @SerialName(value = "review_link")
        review_link("review_link"),
        
        @SerialName(value = "presentation")
        presentation("presentation"),
        
        @SerialName(value = "collaborator")
        collaborator("collaborator"),
        
        @SerialName(value = "pending_collaborator")
        pending_collaborator("pending_collaborator"),
        
        @SerialName(value = "comment")
        comment("comment"),
        
        @SerialName(value = "review_link_item")
        review_link_item("review_link_item"),
        
        @SerialName(value = "account")
        account("account"),
        
        @SerialName(value = "account_member")
        account_member("account_member"),
        
        @SerialName(value = "pending_account_member")
        pending_account_member("pending_account_member"),
        
        @SerialName(value = "subscription")
        subscription("subscription"),
        
        @SerialName(value = "subscription_line_item")
        subscription_line_item("subscription_line_item"),
        
        @SerialName(value = "team")
        team("team"),
        
        @SerialName(value = "team_member")
        team_member("team_member"),
        
        @SerialName(value = "pending_team_member")
        pending_team_member("pending_team_member"),
        
        @SerialName(value = "user")
        user("user"),
        
        @SerialName(value = "action")
        action("action"),
        
        @SerialName(value = "oauth_app")
        oauth_app("oauth_app"),
        
        @SerialName(value = "user_token")
        user_token("user_token"),
        
        @SerialName(value = "webhook")
        webhook("webhook"),
        
        @SerialName(value = "file")
        file("file"),
        
        @SerialName(value = "folder")
        folder("folder"),
        
        @SerialName(value = "version_stack")
        version_stack("version_stack"),
        
        @SerialName(value = "like")
        like("like"),
        
        @SerialName(value = "read")
        read("read")
        
    }


    /**
     * enum for parameter filtersEventType
     */
    @Serializable
    enum class FiltersEventTypeGetAccountAuditLogs(val value: kotlin.String) {
        
        @SerialName(value = "account_locked")
        account_locked("account_locked"),
        
        @SerialName(value = "account_member_created")
        account_member_created("account_member_created"),
        
        @SerialName(value = "account_member_deleted")
        account_member_deleted("account_member_deleted"),
        
        @SerialName(value = "account_member_updated")
        account_member_updated("account_member_updated"),
        
        @SerialName(value = "account_mfa_enforced")
        account_mfa_enforced("account_mfa_enforced"),
        
        @SerialName(value = "account_fio_version_migrated")
        account_fio_version_migrated("account_fio_version_migrated"),
        
        @SerialName(value = "account_fio_version_migrated")
        account_fio_version_migrated2("account_fio_version_migrated"),
        
        @SerialName(value = "account_ownership_transferred")
        account_ownership_transferred("account_ownership_transferred"),
        
        @SerialName(value = "account_restored")
        account_restored("account_restored"),
        
        @SerialName(value = "account_updated")
        account_updated("account_updated"),
        
        @SerialName(value = "label_updated")
        label_updated("label_updated"),
        
        @SerialName(value = "collaborator_added")
        collaborator_added("collaborator_added"),
        
        @SerialName(value = "comment_created")
        comment_created("comment_created"),
        
        @SerialName(value = "join_presentation_request_approved")
        join_presentation_request_approved("join_presentation_request_approved"),
        
        @SerialName(value = "join_project_request_approved")
        join_project_request_approved("join_project_request_approved"),
        
        @SerialName(value = "join_review_link_request_approved")
        join_review_link_request_approved("join_review_link_request_approved"),
        
        @SerialName(value = "join_team_request_approved")
        join_team_request_approved("join_team_request_approved"),
        
        @SerialName(value = "account_permissions_granted_to_user")
        account_permissions_granted_to_user("account_permissions_granted_to_user"),
        
        @SerialName(value = "comment_liked")
        comment_liked("comment_liked"),
        
        @SerialName(value = "file_uploaded")
        file_uploaded("file_uploaded"),
        
        @SerialName(value = "project_permissions_granted_to_account_user_group")
        project_permissions_granted_to_account_user_group("project_permissions_granted_to_account_user_group"),
        
        @SerialName(value = "project_permissions_granted_to_user")
        project_permissions_granted_to_user("project_permissions_granted_to_user"),
        
        @SerialName(value = "resource_invite_sent")
        resource_invite_sent("resource_invite_sent"),
        
        @SerialName(value = "share_viewed")
        share_viewed("share_viewed"),
        
        @SerialName(value = "transfer_batch_completed")
        transfer_batch_completed("transfer_batch_completed"),
        
        @SerialName(value = "user_mfa_enforced")
        user_mfa_enforced("user_mfa_enforced"),
        
        @SerialName(value = "workspace_permissions_granted_to_account_user_group")
        workspace_permissions_granted_to_account_user_group("workspace_permissions_granted_to_account_user_group"),
        
        @SerialName(value = "workspace_permissions_granted_to_user")
        workspace_permissions_granted_to_user("workspace_permissions_granted_to_user"),
        
        @SerialName(value = "new_device_login")
        new_device_login("new_device_login"),
        
        @SerialName(value = "password_changed")
        password_changed("password_changed"),
        
        @SerialName(value = "password_reset_requested")
        password_reset_requested("password_reset_requested"),
        
        @SerialName(value = "pending_account_member_created")
        pending_account_member_created("pending_account_member_created"),
        
        @SerialName(value = "pending_account_member_deleted")
        pending_account_member_deleted("pending_account_member_deleted"),
        
        @SerialName(value = "pending_team_member_created")
        pending_team_member_created("pending_team_member_created"),
        
        @SerialName(value = "pending_team_member_deleted")
        pending_team_member_deleted("pending_team_member_deleted"),
        
        @SerialName(value = "project_unarchived")
        project_unarchived("project_unarchived"),
        
        @SerialName(value = "push_tokens_added")
        push_tokens_added("push_tokens_added"),
        
        @SerialName(value = "push_tokens_deleted")
        push_tokens_deleted("push_tokens_deleted"),
        
        @SerialName(value = "role_added")
        role_added("role_added"),
        
        @SerialName(value = "role_removed")
        role_removed("role_removed"),
        
        @SerialName(value = "session_revoked")
        session_revoked("session_revoked"),
        
        @SerialName(value = "team_created")
        team_created("team_created"),
        
        @SerialName(value = "team_creator_updated")
        team_creator_updated("team_creator_updated"),
        
        @SerialName(value = "team_deleted")
        team_deleted("team_deleted"),
        
        @SerialName(value = "team_lifecycle_policy_updated")
        team_lifecycle_policy_updated("team_lifecycle_policy_updated"),
        
        @SerialName(value = "team_member_created")
        team_member_created("team_member_created"),
        
        @SerialName(value = "team_member_deleted")
        team_member_deleted("team_member_deleted"),
        
        @SerialName(value = "team_member_reset")
        team_member_reset("team_member_reset"),
        
        @SerialName(value = "team_member_updated")
        team_member_updated("team_member_updated"),
        
        @SerialName(value = "team_updated")
        team_updated("team_updated"),
        
        @SerialName(value = "anonymous_user_created")
        anonymous_user_created("anonymous_user_created"),
        
        @SerialName(value = "comment_completed")
        comment_completed("comment_completed"),
        
        @SerialName(value = "comment_deleted")
        comment_deleted("comment_deleted"),
        
        @SerialName(value = "comment_uncompleted")
        comment_uncompleted("comment_uncompleted"),
        
        @SerialName(value = "comment_updated")
        comment_updated("comment_updated"),
        
        @SerialName(value = "join_request_accepted")
        join_request_accepted("join_request_accepted"),
        
        @SerialName(value = "join_request_created")
        join_request_created("join_request_created"),
        
        @SerialName(value = "join_request_declined")
        join_request_declined("join_request_declined"),
        
        @SerialName(value = "join_request_deleted")
        join_request_deleted("join_request_deleted"),
        
        @SerialName(value = "join_request_reset")
        join_request_reset("join_request_reset"),
        
        @SerialName(value = "pending_reviewer_created")
        pending_reviewer_created("pending_reviewer_created"),
        
        @SerialName(value = "pending_reviewer_deleted")
        pending_reviewer_deleted("pending_reviewer_deleted"),
        
        @SerialName(value = "presentation_created")
        presentation_created("presentation_created"),
        
        @SerialName(value = "presentation_deleted")
        presentation_deleted("presentation_deleted"),
        
        @SerialName(value = "presentation_updated")
        presentation_updated("presentation_updated"),
        
        @SerialName(value = "project_archived")
        project_archived("project_archived"),
        
        @SerialName(value = "project_created")
        project_created("project_created"),
        
        @SerialName(value = "project_deleted")
        project_deleted("project_deleted"),
        
        @SerialName(value = "project_invite_link_created")
        project_invite_link_created("project_invite_link_created"),
        
        @SerialName(value = "project_invite_link_revoked")
        project_invite_link_revoked("project_invite_link_revoked"),
        
        @SerialName(value = "project_moved")
        project_moved("project_moved"),
        
        @SerialName(value = "project_restored")
        project_restored("project_restored"),
        
        @SerialName(value = "project_updated")
        project_updated("project_updated"),
        
        @SerialName(value = "reviewer_created")
        reviewer_created("reviewer_created"),
        
        @SerialName(value = "reviewer_deleted")
        reviewer_deleted("reviewer_deleted"),
        
        @SerialName(value = "review_link_assets_added")
        review_link_assets_added("review_link_assets_added"),
        
        @SerialName(value = "review_link_assets_deleted")
        review_link_assets_deleted("review_link_assets_deleted"),
        
        @SerialName(value = "review_link_created")
        review_link_created("review_link_created"),
        
        @SerialName(value = "review_link_deleted")
        review_link_deleted("review_link_deleted"),
        
        @SerialName(value = "review_link_emailed")
        review_link_emailed("review_link_emailed"),
        
        @SerialName(value = "review_link_updated")
        review_link_updated("review_link_updated"),
        
        @SerialName(value = "subscription_cancelled")
        subscription_cancelled("subscription_cancelled"),
        
        @SerialName(value = "subscription_card_updated")
        subscription_card_updated("subscription_card_updated"),
        
        @SerialName(value = "subscription_created")
        subscription_created("subscription_created"),
        
        @SerialName(value = "subscription_line_item_created")
        subscription_line_item_created("subscription_line_item_created"),
        
        @SerialName(value = "subscription_line_item_deleted")
        subscription_line_item_deleted("subscription_line_item_deleted"),
        
        @SerialName(value = "subscription_restored")
        subscription_restored("subscription_restored"),
        
        @SerialName(value = "subscription_updated")
        subscription_updated("subscription_updated"),
        
        @SerialName(value = "action_created")
        action_created("action_created"),
        
        @SerialName(value = "action_deleted")
        action_deleted("action_deleted"),
        
        @SerialName(value = "action_updated")
        action_updated("action_updated"),
        
        @SerialName(value = "webhook_created")
        webhook_created("webhook_created"),
        
        @SerialName(value = "webhook_deleted")
        webhook_deleted("webhook_deleted"),
        
        @SerialName(value = "webhook_updated")
        webhook_updated("webhook_updated"),
        
        @SerialName(value = "asset_copied")
        asset_copied("asset_copied"),
        
        @SerialName(value = "asset_created")
        asset_created("asset_created"),
        
        @SerialName(value = "asset_deleted")
        asset_deleted("asset_deleted"),
        
        @SerialName(value = "asset_moved")
        asset_moved("asset_moved"),
        
        @SerialName(value = "asset_restored")
        asset_restored("asset_restored"),
        
        @SerialName(value = "assets_unversioned")
        assets_unversioned("assets_unversioned"),
        
        @SerialName(value = "asset_updated")
        asset_updated("asset_updated"),
        
        @SerialName(value = "asset_versioned")
        asset_versioned("asset_versioned"),
        
        @SerialName(value = "high_risk_sign_up")
        high_risk_sign_up("high_risk_sign_up"),
        
        @SerialName(value = "sbwm_template_created")
        sbwm_template_created("sbwm_template_created"),
        
        @SerialName(value = "sbwm_template_deleted")
        sbwm_template_deleted("sbwm_template_deleted"),
        
        @SerialName(value = "sbwm_template_updated")
        sbwm_template_updated("sbwm_template_updated"),
        
        @SerialName(value = "allowed_domain_created")
        allowed_domain_created("allowed_domain_created"),
        
        @SerialName(value = "allowed_domain_deleted")
        allowed_domain_deleted("allowed_domain_deleted"),
        
        @SerialName(value = "collaborator_deleted")
        collaborator_deleted("collaborator_deleted"),
        
        @SerialName(value = "media_deleted")
        media_deleted("media_deleted"),
        
        @SerialName(value = "asset_metadata_created")
        asset_metadata_created("asset_metadata_created"),
        
        @SerialName(value = "media_created")
        media_created("media_created"),
        
        @SerialName(value = "pending_collaborator_created")
        pending_collaborator_created("pending_collaborator_created"),
        
        @SerialName(value = "pending_collaborator_deleted")
        pending_collaborator_deleted("pending_collaborator_deleted"),
        
        @SerialName(value = "plan_created")
        plan_created("plan_created"),
        
        @SerialName(value = "plan_deleted")
        plan_deleted("plan_deleted"),
        
        @SerialName(value = "plan_updated")
        plan_updated("plan_updated"),
        
        @SerialName(value = "preference_updated")
        preference_updated("preference_updated"),
        
        @SerialName(value = "asset_archived")
        asset_archived("asset_archived"),
        
        @SerialName(value = "asset_unarchived")
        asset_unarchived("asset_unarchived"),
        
        @SerialName(value = "project_archive_completed")
        project_archive_completed("project_archive_completed"),
        
        @SerialName(value = "project_unarchive_completed")
        project_unarchive_completed("project_unarchive_completed"),
        
        @SerialName(value = "reply_created")
        reply_created("reply_created")
        
    }

    /**
     * Get audit log entries for an Account
     * Fetch audit logs with some filtering capabilities via query params
     * @param accountId Account ID
     * @param filtersStartDate Start ISO Date (optional)
     * @param filtersEndDate End ISO Date (optional)
     * @param filtersResourceType Filter by Resource Type (optional)
     * @param filtersEventType Filter by Type of Activity (optional)
     * @param filtersTeamId Filter by Team ID (optional)
     * @param filtersProjectId Filter by Project ID (optional)
     * @param filtersResourceId Filter by resource ID (Asset ID, Project ID, User ID) (optional)
     * @param filtersUserId Filter by User ID (optional)
     * @param filtersIpAddress Filter by IP Address  This supports both IPv4 (&#x60;1.1.1.1&#x60;) and IPv6 (&#x60;2001:db8:3333:4444:5555:6666:7777:8888&#x60;) (optional)
     * @param page Page number (optional, default to 1)
     * @param pageSize Records per page (optional, default to 50)
     * @return kotlin.collections.List<AuditEvent>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAccountAuditLogs(accountId: kotlin.String, filtersStartDate: kotlinx.datetime.LocalDate? = null, filtersEndDate: kotlinx.datetime.LocalDate? = null, filtersResourceType: FiltersResourceTypeGetAccountAuditLogs? = null, filtersEventType: FiltersEventTypeGetAccountAuditLogs? = null, filtersTeamId: kotlin.String? = null, filtersProjectId: kotlin.String? = null, filtersResourceId: kotlin.String? = null, filtersUserId: kotlin.String? = null, filtersIpAddress: kotlin.String? = null, page: kotlin.Int? = 1, pageSize: kotlin.Int? = 50): HttpResponse<kotlin.collections.List<AuditEvent>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        filtersStartDate?.apply { localVariableQuery["filters[start_date]"] = listOf("$filtersStartDate") }
        filtersEndDate?.apply { localVariableQuery["filters[end_date]"] = listOf("$filtersEndDate") }
        filtersResourceType?.apply { localVariableQuery["filters[resource_type]"] = listOf("${ filtersResourceType.value }") }
        filtersEventType?.apply { localVariableQuery["filters[event_type]"] = listOf("${ filtersEventType.value }") }
        filtersTeamId?.apply { localVariableQuery["filters[team_id]"] = listOf("$filtersTeamId") }
        filtersProjectId?.apply { localVariableQuery["filters[project_id]"] = listOf("$filtersProjectId") }
        filtersResourceId?.apply { localVariableQuery["filters[resource_id]"] = listOf("$filtersResourceId") }
        filtersUserId?.apply { localVariableQuery["filters[user_id]"] = listOf("$filtersUserId") }
        filtersIpAddress?.apply { localVariableQuery["filters[ip_address]"] = listOf("$filtersIpAddress") }
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        pageSize?.apply { localVariableQuery["page_size"] = listOf("$pageSize") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/accounts/{account_id}/events".replace("{" + "account_id" + "}", "$accountId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetAccountAuditLogsResponse>().map { value }
    }

    @Serializable(GetAccountAuditLogsResponse.Companion::class)
    private class GetAccountAuditLogsResponse(val value: List<AuditEvent>) {
        companion object : KSerializer<GetAccountAuditLogsResponse> {
            private val serializer: KSerializer<List<AuditEvent>> = serializer<List<AuditEvent>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetAccountAuditLogsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetAccountAuditLogsResponse(serializer.deserialize(decoder))
        }
    }


    /**
     * enum for parameter filterInsertedAtOp
     */
    @Serializable
    enum class FilterInsertedAtOpGetAuditLogs(val value: kotlin.String) {
        
        @SerialName(value = "eq")
        eq("eq"),
        
        @SerialName(value = "gt")
        gt("gt"),
        
        @SerialName(value = "lt")
        lt("lt"),
        
        @SerialName(value = "gte")
        gte("gte"),
        
        @SerialName(value = "lte")
        lte("lte")
        
    }


    /**
     * enum for parameter filterItemType
     */
    @Serializable
    enum class FilterItemTypeGetAuditLogs(val value: kotlin.String) {
        
        @SerialName(value = "asset")
        asset("asset"),
        
        @SerialName(value = "review_link")
        review_link("review_link"),
        
        @SerialName(value = "presentation")
        presentation("presentation"),
        
        @SerialName(value = "collaborator")
        collaborator("collaborator"),
        
        @SerialName(value = "pending_collaborator")
        pending_collaborator("pending_collaborator"),
        
        @SerialName(value = "comment")
        comment("comment"),
        
        @SerialName(value = "review_link_item")
        review_link_item("review_link_item"),
        
        @SerialName(value = "account")
        account("account"),
        
        @SerialName(value = "account_member")
        account_member("account_member"),
        
        @SerialName(value = "pending_account_member")
        pending_account_member("pending_account_member"),
        
        @SerialName(value = "subscription")
        subscription("subscription"),
        
        @SerialName(value = "subscription_line_item")
        subscription_line_item("subscription_line_item"),
        
        @SerialName(value = "team")
        team("team"),
        
        @SerialName(value = "team_member")
        team_member("team_member"),
        
        @SerialName(value = "pending_team_member")
        pending_team_member("pending_team_member"),
        
        @SerialName(value = "user")
        user("user"),
        
        @SerialName(value = "action")
        action("action"),
        
        @SerialName(value = "oauth_app")
        oauth_app("oauth_app"),
        
        @SerialName(value = "user_token")
        user_token("user_token"),
        
        @SerialName(value = "webhook")
        webhook("webhook"),
        
        @SerialName(value = "file")
        file("file"),
        
        @SerialName(value = "folder")
        folder("folder"),
        
        @SerialName(value = "version_stack")
        version_stack("version_stack"),
        
        @SerialName(value = "like")
        like("like"),
        
        @SerialName(value = "read")
        read("read")
        
    }


    /**
     * enum for parameter filterAction
     */
    @Serializable
    enum class FilterActionGetAuditLogs(val value: kotlin.String) {
        
        @SerialName(value = "AssetDeleted")
        AssetDeleted("AssetDeleted"),
        
        @SerialName(value = "PresentationUpdated")
        PresentationUpdated("PresentationUpdated"),
        
        @SerialName(value = "AssetMoved")
        AssetMoved("AssetMoved"),
        
        @SerialName(value = "AssetVersioned")
        AssetVersioned("AssetVersioned"),
        
        @SerialName(value = "AccountDelinquent")
        AccountDelinquent("AccountDelinquent"),
        
        @SerialName(value = "CollaboratorDeleted")
        CollaboratorDeleted("CollaboratorDeleted"),
        
        @SerialName(value = "PushTokensAdded")
        PushTokensAdded("PushTokensAdded"),
        
        @SerialName(value = "AccountPendingUserRemoved")
        AccountPendingUserRemoved("AccountPendingUserRemoved"),
        
        @SerialName(value = "JoinRequestAccepted")
        JoinRequestAccepted("JoinRequestAccepted"),
        
        @SerialName(value = "SubscriptionRestored")
        SubscriptionRestored("SubscriptionRestored"),
        
        @SerialName(value = "EmailChanged")
        EmailChanged("EmailChanged"),
        
        @SerialName(value = "AccountMemberDeleted")
        AccountMemberDeleted("AccountMemberDeleted"),
        
        @SerialName(value = "AccountMemberUpdated")
        AccountMemberUpdated("AccountMemberUpdated"),
        
        @SerialName(value = "RoleAdded")
        RoleAdded("RoleAdded"),
        
        @SerialName(value = "ApplicationCreated")
        ApplicationCreated("ApplicationCreated"),
        
        @SerialName(value = "CommentCreated")
        CommentCreated("CommentCreated"),
        
        @SerialName(value = "AssetUpdated")
        AssetUpdated("AssetUpdated"),
        
        @SerialName(value = "CommentUpdated")
        CommentUpdated("CommentUpdated"),
        
        @SerialName(value = "CommentDeleted")
        CommentDeleted("CommentDeleted"),
        
        @SerialName(value = "AssetArchived")
        AssetArchived("AssetArchived"),
        
        @SerialName(value = "ProjectUpdated")
        ProjectUpdated("ProjectUpdated"),
        
        @SerialName(value = "TeamUpdated")
        TeamUpdated("TeamUpdated"),
        
        @SerialName(value = "ReviewLinkEmailed")
        ReviewLinkEmailed("ReviewLinkEmailed"),
        
        @SerialName(value = "SBWMTemplateDeleted")
        SBWMTemplateDeleted("SBWMTemplateDeleted"),
        
        @SerialName(value = "PendingTeamMemberCreated")
        PendingTeamMemberCreated("PendingTeamMemberCreated"),
        
        @SerialName(value = "PasswordResetRequested")
        PasswordResetRequested("PasswordResetRequested"),
        
        @SerialName(value = "ProjectInviteLinkCreated")
        ProjectInviteLinkCreated("ProjectInviteLinkCreated"),
        
        @SerialName(value = "AccountPendingCollaboratorsRemoved")
        AccountPendingCollaboratorsRemoved("AccountPendingCollaboratorsRemoved"),
        
        @SerialName(value = "GoogleAuthDisabled")
        GoogleAuthDisabled("GoogleAuthDisabled"),
        
        @SerialName(value = "TeamDeleted")
        TeamDeleted("TeamDeleted"),
        
        @SerialName(value = "ActionDeleted")
        ActionDeleted("ActionDeleted"),
        
        @SerialName(value = "ProjectCreated")
        ProjectCreated("ProjectCreated"),
        
        @SerialName(value = "PresentationCreated")
        PresentationCreated("PresentationCreated"),
        
        @SerialName(value = "AssetCopied")
        AssetCopied("AssetCopied"),
        
        @SerialName(value = "PreferenceUpdated")
        PreferenceUpdated("PreferenceUpdated"),
        
        @SerialName(value = "AccountCollaboratorsRemoved")
        AccountCollaboratorsRemoved("AccountCollaboratorsRemoved"),
        
        @SerialName(value = "PendingCollaboratorDeleted")
        PendingCollaboratorDeleted("PendingCollaboratorDeleted"),
        
        @SerialName(value = "ProjectMoved")
        ProjectMoved("ProjectMoved"),
        
        @SerialName(value = "ReviewerDeleted")
        ReviewerDeleted("ReviewerDeleted"),
        
        @SerialName(value = "PendingTeamMemberDeleted")
        PendingTeamMemberDeleted("PendingTeamMemberDeleted"),
        
        @SerialName(value = "ActionUpdated")
        ActionUpdated("ActionUpdated"),
        
        @SerialName(value = "AssetCreated")
        AssetCreated("AssetCreated"),
        
        @SerialName(value = "ReviewLinkUpdated")
        ReviewLinkUpdated("ReviewLinkUpdated"),
        
        @SerialName(value = "CollaboratorCreated")
        CollaboratorCreated("CollaboratorCreated"),
        
        @SerialName(value = "AssetsUnversioned")
        AssetsUnversioned("AssetsUnversioned"),
        
        @SerialName(value = "EmailConfirmed")
        EmailConfirmed("EmailConfirmed"),
        
        @SerialName(value = "TeamCreated")
        TeamCreated("TeamCreated"),
        
        @SerialName(value = "AccountUpdated")
        AccountUpdated("AccountUpdated"),
        
        @SerialName(value = "AccountRestored")
        AccountRestored("AccountRestored"),
        
        @SerialName(value = "JoinRequestCreated")
        JoinRequestCreated("JoinRequestCreated"),
        
        @SerialName(value = "SubscriptionCardUpdated")
        SubscriptionCardUpdated("SubscriptionCardUpdated"),
        
        @SerialName(value = "AccountLocked")
        AccountLocked("AccountLocked"),
        
        @SerialName(value = "TeamMemberUpdated")
        TeamMemberUpdated("TeamMemberUpdated"),
        
        @SerialName(value = "JoinRequestReset")
        JoinRequestReset("JoinRequestReset"),
        
        @SerialName(value = "WebhookDeleted")
        WebhookDeleted("WebhookDeleted"),
        
        @SerialName(value = "ProjectInviteLinksRevoked")
        ProjectInviteLinksRevoked("ProjectInviteLinksRevoked"),
        
        @SerialName(value = "WebhookCreated")
        WebhookCreated("WebhookCreated"),
        
        @SerialName(value = "SubscriptionLineItemDeleted")
        SubscriptionLineItemDeleted("SubscriptionLineItemDeleted"),
        
        @SerialName(value = "ApplicationUpdated")
        ApplicationUpdated("ApplicationUpdated"),
        
        @SerialName(value = "MetadataCreated")
        MetadataCreated("MetadataCreated"),
        
        @SerialName(value = "UserLoginAttempt")
        UserLoginAttempt("UserLoginAttempt"),
        
        @SerialName(value = "ReviewLinkAssetsAdded")
        ReviewLinkAssetsAdded("ReviewLinkAssetsAdded"),
        
        @SerialName(value = "ProjectDeleted")
        ProjectDeleted("ProjectDeleted"),
        
        @SerialName(value = "ProjectArchiveCompleted")
        ProjectArchiveCompleted("ProjectArchiveCompleted"),
        
        @SerialName(value = "AccountMemberCreated")
        AccountMemberCreated("AccountMemberCreated"),
        
        @SerialName(value = "OauthAppCreated")
        OauthAppCreated("OauthAppCreated"),
        
        @SerialName(value = "SessionRevoked")
        SessionRevoked("SessionRevoked"),
        
        @SerialName(value = "SubscriptionLineItemCreated")
        SubscriptionLineItemCreated("SubscriptionLineItemCreated"),
        
        @SerialName(value = "UserTokenDeleted")
        UserTokenDeleted("UserTokenDeleted"),
        
        @SerialName(value = "PendingReviewerDeleted")
        PendingReviewerDeleted("PendingReviewerDeleted"),
        
        @SerialName(value = "ActionCreated")
        ActionCreated("ActionCreated"),
        
        @SerialName(value = "TeamMemberReset")
        TeamMemberReset("TeamMemberReset"),
        
        @SerialName(value = "LoginFactorCreated")
        LoginFactorCreated("LoginFactorCreated"),
        
        @SerialName(value = "JoinRequestDeleted")
        JoinRequestDeleted("JoinRequestDeleted"),
        
        @SerialName(value = "UserTokenDisabled")
        UserTokenDisabled("UserTokenDisabled"),
        
        @SerialName(value = "AssetUnarchived")
        AssetUnarchived("AssetUnarchived"),
        
        @SerialName(value = "AssetLabelUpdated")
        AssetLabelUpdated("AssetLabelUpdated"),
        
        @SerialName(value = "SubscriptionCreated")
        SubscriptionCreated("SubscriptionCreated"),
        
        @SerialName(value = "PendingReviewerCreated")
        PendingReviewerCreated("PendingReviewerCreated"),
        
        @SerialName(value = "TeamMemberRemoved")
        TeamMemberRemoved("TeamMemberRemoved"),
        
        @SerialName(value = "PushTokensDeleted")
        PushTokensDeleted("PushTokensDeleted"),
        
        @SerialName(value = "ProjectUnarchived")
        ProjectUnarchived("ProjectUnarchived"),
        
        @SerialName(value = "SubscriptionCancelled")
        SubscriptionCancelled("SubscriptionCancelled"),
        
        @SerialName(value = "ProjectUnarchiveCompleted")
        ProjectUnarchiveCompleted("ProjectUnarchiveCompleted"),
        
        @SerialName(value = "ProjectRestored")
        ProjectRestored("ProjectRestored"),
        
        @SerialName(value = "WebhookUpdated")
        WebhookUpdated("WebhookUpdated"),
        
        @SerialName(value = "ApplicationDeleted")
        ApplicationDeleted("ApplicationDeleted"),
        
        @SerialName(value = "AssetHardDeleted")
        AssetHardDeleted("AssetHardDeleted"),
        
        @SerialName(value = "OauthAppDeleted")
        OauthAppDeleted("OauthAppDeleted"),
        
        @SerialName(value = "AccountMFAEnforced")
        AccountMFAEnforced("AccountMFAEnforced"),
        
        @SerialName(value = "AccountOwnershipTransferred")
        AccountOwnershipTransferred("AccountOwnershipTransferred"),
        
        @SerialName(value = "CommentCompleted")
        CommentCompleted("CommentCompleted"),
        
        @SerialName(value = "ReviewerCreated")
        ReviewerCreated("ReviewerCreated"),
        
        @SerialName(value = "UserLogin")
        UserLogin("UserLogin"),
        
        @SerialName(value = "SubscriptionUpdated")
        SubscriptionUpdated("SubscriptionUpdated"),
        
        @SerialName(value = "AssetRestored")
        AssetRestored("AssetRestored"),
        
        @SerialName(value = "CommentUncompleted")
        CommentUncompleted("CommentUncompleted"),
        
        @SerialName(value = "ProjectArchived")
        ProjectArchived("ProjectArchived"),
        
        @SerialName(value = "JoinRequestDeclined")
        JoinRequestDeclined("JoinRequestDeclined"),
        
        @SerialName(value = "PendingAccountMemberCreated")
        PendingAccountMemberCreated("PendingAccountMemberCreated"),
        
        @SerialName(value = "SBWMTemplateCreated")
        SBWMTemplateCreated("SBWMTemplateCreated"),
        
        @SerialName(value = "TeamCreatorUpdated")
        TeamCreatorUpdated("TeamCreatorUpdated"),
        
        @SerialName(value = "TeamLifecyclePolicyUpdated")
        TeamLifecyclePolicyUpdated("TeamLifecyclePolicyUpdated"),
        
        @SerialName(value = "SBWMTemplateUpdated")
        SBWMTemplateUpdated("SBWMTemplateUpdated"),
        
        @SerialName(value = "LoginFactorValidated")
        LoginFactorValidated("LoginFactorValidated"),
        
        @SerialName(value = "ReviewLinkCreated")
        ReviewLinkCreated("ReviewLinkCreated"),
        
        @SerialName(value = "TeamMemberCreated")
        TeamMemberCreated("TeamMemberCreated"),
        
        @SerialName(value = "ReplyCreated")
        ReplyCreated("ReplyCreated"),
        
        @SerialName(value = "UserUpdated")
        UserUpdated("UserUpdated"),
        
        @SerialName(value = "PendingCollaboratorCreated")
        PendingCollaboratorCreated("PendingCollaboratorCreated"),
        
        @SerialName(value = "AnonymousUserCreated")
        AnonymousUserCreated("AnonymousUserCreated"),
        
        @SerialName(value = "PasswordChange")
        PasswordChange("PasswordChange"),
        
        @SerialName(value = "ReviewLinkDeleted")
        ReviewLinkDeleted("ReviewLinkDeleted"),
        
        @SerialName(value = "AccountUserRemoved")
        AccountUserRemoved("AccountUserRemoved"),
        
        @SerialName(value = "UserTokenCreated")
        UserTokenCreated("UserTokenCreated"),
        
        @SerialName(value = "PresentationDeleted")
        PresentationDeleted("PresentationDeleted"),
        
        @SerialName(value = "UserTokenUpdated")
        UserTokenUpdated("UserTokenUpdated"),
        
        @SerialName(value = "OauthAppUpdated")
        OauthAppUpdated("OauthAppUpdated"),
        
        @SerialName(value = "UserTokenEnabled")
        UserTokenEnabled("UserTokenEnabled")
        
    }

    /**
     * (Legacy) Get Audit Logs for an Account
     * Fetch audit logs with some filtering capabilities via query params
     * @param accountId Account ID
     * @param filterItemId Filter by Item ID (Asset ID, Project ID, User ID) (optional)
     * @param filterInsertedAtOp Filter by log datetime using logical operators (optional)
     * @param filterInsertedAtValue ISO Datetime (optional)
     * @param filterItemType Filter by Item Type (optional)
     * @param filterAction Filter by Action (optional)
     * @param filterActorId Filter by Actor ID (optional)
     * @param filterTeamId Filter by Team ID (optional)
     * @param filterIpAddress Filter by IP Address  This supports both IPv4 (&#x60;1.1.1.1&#x60;) and IPv6 (&#x60;2001:db8:3333:4444:5555:6666:7777:8888&#x60;) (optional)
     * @param page Page number (optional)
     * @param pageSize Records per page (optional, default to 50)
     * @return kotlin.collections.List<Audit>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAuditLogs(accountId: kotlin.String, filterItemId: kotlin.String? = null, filterInsertedAtOp: FilterInsertedAtOpGetAuditLogs? = null, filterInsertedAtValue: kotlinx.datetime.Instant? = null, filterItemType: FilterItemTypeGetAuditLogs? = null, filterAction: FilterActionGetAuditLogs? = null, filterActorId: kotlin.String? = null, filterTeamId: kotlin.String? = null, filterIpAddress: kotlin.String? = null, page: kotlin.Int? = null, pageSize: kotlin.Int? = 50): HttpResponse<kotlin.collections.List<Audit>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        filterItemId?.apply { localVariableQuery["filter[item_id]"] = listOf("$filterItemId") }
        filterInsertedAtOp?.apply { localVariableQuery["filter[inserted_at][op]"] = listOf("${ filterInsertedAtOp.value }") }
        filterInsertedAtValue?.apply { localVariableQuery["filter[inserted_at][value]"] = listOf("$filterInsertedAtValue") }
        filterItemType?.apply { localVariableQuery["filter[item_type]"] = listOf("${ filterItemType.value }") }
        filterAction?.apply { localVariableQuery["filter[action]"] = listOf("${ filterAction.value }") }
        filterActorId?.apply { localVariableQuery["filter[actor_id]"] = listOf("$filterActorId") }
        filterTeamId?.apply { localVariableQuery["filter[team_id]"] = listOf("$filterTeamId") }
        filterIpAddress?.apply { localVariableQuery["filter[ip_address]"] = listOf("$filterIpAddress") }
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        pageSize?.apply { localVariableQuery["page_size"] = listOf("$pageSize") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/accounts/{account_id}/audit_logs".replace("{" + "account_id" + "}", "$accountId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetAuditLogsResponse>().map { value }
    }

    @Serializable(GetAuditLogsResponse.Companion::class)
    private class GetAuditLogsResponse(val value: List<Audit>) {
        companion object : KSerializer<GetAuditLogsResponse> {
            private val serializer: KSerializer<List<Audit>> = serializer<List<Audit>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetAuditLogsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetAuditLogsResponse(serializer.deserialize(decoder))
        }
    }


    /**
     * enum for parameter filtersResourceType
     */
    @Serializable
    enum class FiltersResourceTypeGetUserAuditLogs(val value: kotlin.String) {
        
        @SerialName(value = "asset")
        asset("asset"),
        
        @SerialName(value = "review_link")
        review_link("review_link"),
        
        @SerialName(value = "presentation")
        presentation("presentation"),
        
        @SerialName(value = "collaborator")
        collaborator("collaborator"),
        
        @SerialName(value = "pending_collaborator")
        pending_collaborator("pending_collaborator"),
        
        @SerialName(value = "comment")
        comment("comment"),
        
        @SerialName(value = "review_link_item")
        review_link_item("review_link_item"),
        
        @SerialName(value = "account")
        account("account"),
        
        @SerialName(value = "account_member")
        account_member("account_member"),
        
        @SerialName(value = "pending_account_member")
        pending_account_member("pending_account_member"),
        
        @SerialName(value = "subscription")
        subscription("subscription"),
        
        @SerialName(value = "subscription_line_item")
        subscription_line_item("subscription_line_item"),
        
        @SerialName(value = "team")
        team("team"),
        
        @SerialName(value = "team_member")
        team_member("team_member"),
        
        @SerialName(value = "pending_team_member")
        pending_team_member("pending_team_member"),
        
        @SerialName(value = "user")
        user("user"),
        
        @SerialName(value = "action")
        action("action"),
        
        @SerialName(value = "oauth_app")
        oauth_app("oauth_app"),
        
        @SerialName(value = "user_token")
        user_token("user_token"),
        
        @SerialName(value = "webhook")
        webhook("webhook"),
        
        @SerialName(value = "file")
        file("file"),
        
        @SerialName(value = "folder")
        folder("folder"),
        
        @SerialName(value = "version_stack")
        version_stack("version_stack"),
        
        @SerialName(value = "like")
        like("like"),
        
        @SerialName(value = "read")
        read("read")
        
    }


    /**
     * enum for parameter filtersEventType
     */
    @Serializable
    enum class FiltersEventTypeGetUserAuditLogs(val value: kotlin.String) {
        
        @SerialName(value = "email_address_changed")
        email_address_changed("email_address_changed"),
        
        @SerialName(value = "email_change_confirmation_requested")
        email_change_confirmation_requested("email_change_confirmation_requested"),
        
        @SerialName(value = "email_confirmed")
        email_confirmed("email_confirmed"),
        
        @SerialName(value = "google_auth_disabled")
        google_auth_disabled("google_auth_disabled"),
        
        @SerialName(value = "google_auth_enabled")
        google_auth_enabled("google_auth_enabled"),
        
        @SerialName(value = "login_factor_created")
        login_factor_created("login_factor_created"),
        
        @SerialName(value = "login_factor_validated")
        login_factor_validated("login_factor_validated"),
        
        @SerialName(value = "new_device_login")
        new_device_login("new_device_login"),
        
        @SerialName(value = "new_user_email_confirmation_requested")
        new_user_email_confirmation_requested("new_user_email_confirmation_requested"),
        
        @SerialName(value = "oauth_app_created")
        oauth_app_created("oauth_app_created"),
        
        @SerialName(value = "oauth_app_deleted")
        oauth_app_deleted("oauth_app_deleted"),
        
        @SerialName(value = "password_changed")
        password_changed("password_changed"),
        
        @SerialName(value = "password_reset_requested")
        password_reset_requested("password_reset_requested"),
        
        @SerialName(value = "push_tokens_added")
        push_tokens_added("push_tokens_added"),
        
        @SerialName(value = "push_tokens_deleted")
        push_tokens_deleted("push_tokens_deleted"),
        
        @SerialName(value = "role_added")
        role_added("role_added"),
        
        @SerialName(value = "role_removed")
        role_removed("role_removed"),
        
        @SerialName(value = "session_revoked")
        session_revoked("session_revoked"),
        
        @SerialName(value = "user_deactivated")
        user_deactivated("user_deactivated"),
        
        @SerialName(value = "user_login")
        user_login("user_login"),
        
        @SerialName(value = "user_login_attempt")
        user_login_attempt("user_login_attempt"),
        
        @SerialName(value = "user_mfa_enforced")
        user_mfa_enforced("user_mfa_enforced"),
        
        @SerialName(value = "user_reactivated")
        user_reactivated("user_reactivated"),
        
        @SerialName(value = "user_signup")
        user_signup("user_signup"),
        
        @SerialName(value = "user_token_created")
        user_token_created("user_token_created"),
        
        @SerialName(value = "user_token_deleted")
        user_token_deleted("user_token_deleted"),
        
        @SerialName(value = "user_token_disabled")
        user_token_disabled("user_token_disabled"),
        
        @SerialName(value = "user_token_enabled")
        user_token_enabled("user_token_enabled"),
        
        @SerialName(value = "user_token_updated")
        user_token_updated("user_token_updated"),
        
        @SerialName(value = "user_updated")
        user_updated("user_updated")
        
    }

    /**
     * Get audit log entries for a specified User
     * Fetch audit logs for a given user with some filtering capabilities via query params. It works best to think of this as an _activity_ log for the specified user
     * @param userId User ID
     * @param filtersStartDate Start ISO Date (optional)
     * @param filtersEndDate End ISO Date (optional)
     * @param filtersResourceType Filter by Resource Type (optional)
     * @param filtersEventType Filter by Type of Activity (optional)
     * @param filtersTeamId Filter by Team ID (optional)
     * @param filtersProjectId Filter by Project ID (optional)
     * @param filtersResourceId Filter by resource ID (Asset ID, Project ID, User ID) (optional)
     * @param filtersUserId Filter by User ID (optional)
     * @param filtersIpAddress Filter by IP Address (optional)
     * @param page Page number (optional, default to 1)
     * @param pageSize Records per page (optional, default to 50)
     * @return kotlin.collections.List<AuditEvent>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUserAuditLogs(userId: kotlin.String, filtersStartDate: kotlinx.datetime.LocalDate? = null, filtersEndDate: kotlinx.datetime.LocalDate? = null, filtersResourceType: FiltersResourceTypeGetUserAuditLogs? = null, filtersEventType: FiltersEventTypeGetUserAuditLogs? = null, filtersTeamId: kotlin.String? = null, filtersProjectId: kotlin.String? = null, filtersResourceId: kotlin.String? = null, filtersUserId: kotlin.String? = null, filtersIpAddress: kotlin.String? = null, page: kotlin.Int? = 1, pageSize: kotlin.Int? = 50): HttpResponse<kotlin.collections.List<AuditEvent>> {

        val localVariableAuthNames = listOf<String>("OAuth2", "OAuth2", "JWT", "DeveloperToken")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        filtersStartDate?.apply { localVariableQuery["filters[start_date]"] = listOf("$filtersStartDate") }
        filtersEndDate?.apply { localVariableQuery["filters[end_date]"] = listOf("$filtersEndDate") }
        filtersResourceType?.apply { localVariableQuery["filters[resource_type]"] = listOf("${ filtersResourceType.value }") }
        filtersEventType?.apply { localVariableQuery["filters[event_type]"] = listOf("${ filtersEventType.value }") }
        filtersTeamId?.apply { localVariableQuery["filters[team_id]"] = listOf("$filtersTeamId") }
        filtersProjectId?.apply { localVariableQuery["filters[project_id]"] = listOf("$filtersProjectId") }
        filtersResourceId?.apply { localVariableQuery["filters[resource_id]"] = listOf("$filtersResourceId") }
        filtersUserId?.apply { localVariableQuery["filters[user_id]"] = listOf("$filtersUserId") }
        filtersIpAddress?.apply { localVariableQuery["filters[ip_address]"] = listOf("$filtersIpAddress") }
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        pageSize?.apply { localVariableQuery["page_size"] = listOf("$pageSize") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v2/users/{user_id}/events".replace("{" + "user_id" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetUserAuditLogsResponse>().map { value }
    }

    @Serializable(GetUserAuditLogsResponse.Companion::class)
    private class GetUserAuditLogsResponse(val value: List<AuditEvent>) {
        companion object : KSerializer<GetUserAuditLogsResponse> {
            private val serializer: KSerializer<List<AuditEvent>> = serializer<List<AuditEvent>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: GetUserAuditLogsResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = GetUserAuditLogsResponse(serializer.deserialize(decoder))
        }
    }

}
