/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.models

import dev.androidbroadcast.framesdk.models.AssetSource

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param type Must be `file` if `is_realtime_upload` is `true`.
 * @param name The name the asset should have in Frame.io. This value does not have to match the name of the file on disk; it can be whatever you want it to be in Frame.io.  Required if `is_realtime_upload` is `false`.  If `is_realtime_upload` is `true`, must containa valid extension in the form of `\".[ext]\"`, unless `extension` is provided, in which case this field may be `null` or omitted.
 * @param extension Required when `is_realtime_upload` is `true`, when `name` is not known at time of asset creation. If `name` is provided, must match extension of that value.  Ignored when `is_realtime_upload` is `false`.  When supplied, asset will be creted with `name` value of `\"[new file].extension\"`.
 * @param filetype MIME type like `video/quicktime`. Many languages have built in utilities for detecting file mimetype (see Go and Python for examples).  Required if `is_realtime_upload` is `true`.
 * @param isRealtimeUpload If `true`, File data for this asset is to be uploaded through the Real-time Uploads API.  If `false`, File data for this asset will be uploaded through the default API.  Must be `false` if `filetype` is not `file`.
 * @param description Brief description of the Asset
 * @param filesize File size in bytes.  Required if `is_realtime_upload` is not `true`.
 * @param properties Custom key-value data
 * @param source 
 */
@Serializable

data class CreateAssetRequest (

    /* Must be `file` if `is_realtime_upload` is `true`. */
    @SerialName(value = "type") @Required val type: CreateAssetRequest.Type,

    /* The name the asset should have in Frame.io. This value does not have to match the name of the file on disk; it can be whatever you want it to be in Frame.io.  Required if `is_realtime_upload` is `false`.  If `is_realtime_upload` is `true`, must containa valid extension in the form of `\".[ext]\"`, unless `extension` is provided, in which case this field may be `null` or omitted. */
    @SerialName(value = "name") val name: kotlin.String? = null,

    /* Required when `is_realtime_upload` is `true`, when `name` is not known at time of asset creation. If `name` is provided, must match extension of that value.  Ignored when `is_realtime_upload` is `false`.  When supplied, asset will be creted with `name` value of `\"[new file].extension\"`. */
    @SerialName(value = "extension") val extension: kotlin.String? = null,

    /* MIME type like `video/quicktime`. Many languages have built in utilities for detecting file mimetype (see Go and Python for examples).  Required if `is_realtime_upload` is `true`. */
    @SerialName(value = "filetype") val filetype: kotlin.String? = null,

    /* If `true`, File data for this asset is to be uploaded through the Real-time Uploads API.  If `false`, File data for this asset will be uploaded through the default API.  Must be `false` if `filetype` is not `file`. */
    @SerialName(value = "is_realtime_upload") val isRealtimeUpload: kotlin.Boolean? = false,

    /* Brief description of the Asset */
    @SerialName(value = "description") val description: kotlin.String? = null,

    /* File size in bytes.  Required if `is_realtime_upload` is not `true`. */
    @SerialName(value = "filesize") val filesize: kotlin.Int? = null,

    /* Custom key-value data */
    @SerialName(value = "properties") val properties: kotlin.String? = null,

    @SerialName(value = "source") val source: AssetSource? = null

) {

    /**
     * Must be `file` if `is_realtime_upload` is `true`.
     *
     * Values: file,folder
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "file") file("file"),
        @SerialName(value = "folder") folder("folder");
    }

}

