/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.models

import dev.androidbroadcast.framesdk.models.Asset
import dev.androidbroadcast.framesdk.models.AssetLabel
import dev.androidbroadcast.framesdk.models.MetadataFlags
import dev.androidbroadcast.framesdk.models.OneOfLessThanGreaterThan
import dev.androidbroadcast.framesdk.models.RealtimeAssetResponse
import dev.androidbroadcast.framesdk.models.RequiredTranscodes
import dev.androidbroadcast.framesdk.models.User
import dev.androidbroadcast.framesdk.models.UserPermissions

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param id The ID for this asset, can be used in places like `https://app.frame.io/player/:id` to go directly to an asset.
 * @param name Represents the name of the asset (filename).
 * @param accountId Account ID this asset belongs to
 * @param archiveFrom 
 * @param archiveScheduledAt 
 * @param archiveStatus 
 * @param archivedAt 
 * @param assetType 
 * @param bundle 
 * @param bundleView 
 * @param coverAssetId 
 * @param creator 
 * @param frames The number of frames in this asset (really only useful for videos)
 * @param hardDeletedAt Indicates the datetime this asset was hard deleted (30 days after soft-deletion)
 * @param index Represented within the Frame.io UI as the \"custom sort order\" within the grid view
 * @param isBundleChild Indicates whether an asset is the child of a bundle asset
 * @param isHlsRequired Indicates whether HLS is required to playback this asset
 * @param isSessionWatermarked Indicates if this asset is subject to Session Based Watermarking (WMID)
 * @param itemCount Applies only to folders and version stacks, indicates the number of items in that container
 * @param label 
 * @param metadata 
 * @param metadataFlags 
 * @param original This is a URL to download the original asset, or in the event it's subject to watermarking but you still have permission to download - an asset that will be watermarked just-in-time as you download it
 * @param parentAssetId The folder that this asset is in
 * @param projectId The project ID that this asset belongs to
 * @param properties Accepts arbitrary key/value pairs for storing information on an asset
 * @param requiredTranscodes 
 * @param teamId 
 * @param userPermissions 
 * @param type 
 * @param viewCount Not a very helpful number, this really just represents the number of times this asset has been requested via the API
 */
@Serializable

data class CreateAsset200Response (

    /* The ID for this asset, can be used in places like `https://app.frame.io/player/:id` to go directly to an asset. */
    @SerialName(value = "id") @Required val id: kotlin.String,

    /* Represents the name of the asset (filename). */
    @SerialName(value = "name") @Required val name: kotlin.String,

    /* Account ID this asset belongs to */
    @SerialName(value = "account_id") val accountId: kotlin.String? = null,

    @SerialName(value = "archive_from") val archiveFrom: kotlinx.datetime.Instant? = null,

    @SerialName(value = "archive_scheduled_at") val archiveScheduledAt: kotlinx.datetime.Instant? = null,

    @SerialName(value = "archive_status") val archiveStatus: kotlin.String? = null,

    @SerialName(value = "archived_at") val archivedAt: kotlinx.datetime.Instant? = null,

    @SerialName(value = "asset_type") val assetType: CreateAsset200Response.AssetType? = null,

    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "bundle") val bundle: kotlin.Boolean? = null,

    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "bundle_view") val bundleView: kotlin.String? = null,

    @SerialName(value = "cover_asset_id") val coverAssetId: kotlin.String? = null,

    @SerialName(value = "creator") val creator: User? = null,

    /* The number of frames in this asset (really only useful for videos) */
    @SerialName(value = "frames") val frames: kotlin.Int? = null,

    /* Indicates the datetime this asset was hard deleted (30 days after soft-deletion) */
    @SerialName(value = "hard_deleted_at") val hardDeletedAt: kotlinx.datetime.Instant? = null,

    /* Represented within the Frame.io UI as the \"custom sort order\" within the grid view */
    @SerialName(value = "index") val index: kotlin.Float? = null,

    /* Indicates whether an asset is the child of a bundle asset */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "is_bundle_child") val isBundleChild: kotlin.Boolean? = null,

    /* Indicates whether HLS is required to playback this asset */
    @SerialName(value = "is_hls_required") val isHlsRequired: kotlin.Boolean? = null,

    /* Indicates if this asset is subject to Session Based Watermarking (WMID) */
    @SerialName(value = "is_session_watermarked") val isSessionWatermarked: kotlin.Boolean? = null,

    /* Applies only to folders and version stacks, indicates the number of items in that container */
    @SerialName(value = "item_count") val itemCount: kotlin.Int? = null,

    @SerialName(value = "label") val label: AssetLabel? = null,

    @SerialName(value = "metadata") val metadata: kotlin.String? = null,

    @SerialName(value = "metadata_flags") val metadataFlags: MetadataFlags? = null,

    /* This is a URL to download the original asset, or in the event it's subject to watermarking but you still have permission to download - an asset that will be watermarked just-in-time as you download it */
    @SerialName(value = "original") val original: kotlin.String? = null,

    /* The folder that this asset is in */
    @SerialName(value = "parent_asset_id") val parentAssetId: kotlin.String? = null,

    /* The project ID that this asset belongs to */
    @SerialName(value = "project_id") val projectId: kotlin.String? = null,

    /* Accepts arbitrary key/value pairs for storing information on an asset */
    @SerialName(value = "properties") val properties: OneOfLessThanGreaterThan? = null,

    @SerialName(value = "required_transcodes") val requiredTranscodes: RequiredTranscodes? = null,

    @SerialName(value = "team_id") val teamId: kotlin.String? = null,

    @SerialName(value = "user_permissions") val userPermissions: UserPermissions? = null,

    @SerialName(value = "type") val type: CreateAsset200Response.Type? = null,

    /* Not a very helpful number, this really just represents the number of times this asset has been requested via the API */
    @SerialName(value = "view_count") val viewCount: kotlin.Int? = null

) {

    /**
     * 
     *
     * Values: document,image,stream
     */
    @Serializable
    enum class AssetType(val value: kotlin.String) {
        @SerialName(value = "document") document("document"),
        @SerialName(value = "image") image("image"),
        @SerialName(value = "stream") stream("stream");
    }
    /**
     * 
     *
     * Values: file,folder,version_stack,bundle
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "file") file("file"),
        @SerialName(value = "folder") folder("folder"),
        @SerialName(value = "version_stack") version_stack("version_stack"),
        @SerialName(value = "bundle") bundle("bundle");
    }

}

