/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.models

import dev.androidbroadcast.framesdk.models.Project
import dev.androidbroadcast.framesdk.models.ReviewLinkItem
import dev.androidbroadcast.framesdk.models.ShareableEntityAccessControl
import dev.androidbroadcast.framesdk.models.Team
import dev.androidbroadcast.framesdk.models.User

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param name Name of the Review Link
 * @param accessControl 
 * @param availableFeatures 
 * @param allowApprovals Enable/disable changing an Asset's status by non-Collaborator/Team Members via the Review Link.
 * @param bundleCount 
 * @param currentVersionOnly Show **only** the most recent version of Assets in the Review Link
 * @param deletedAt Deletion time of the Review Link
 * @param enableDownloading Enable or disable downloading on this Review Link. The default depends on whether the auth used to create this review link allows for this or not.
 * @param expiresAt Expiration time of the Review Link
 * @param enableComments 
 * @param folderItemCount 
 * @param isActive Disable an Review Link by switching this from `true` -> `false`, and vice-versa.
 * @param notifyOnView 
 * @param password Actually a `passphrase`, this is an additional security measure for a second layer of security on your Review Links.    Supports alphanumeric input.
 * @param hasPassword If false, the Review Link has no passphrase
 * @param id UUID of the Review Link
 * @param insertedAt 
 * @param isAutoplay 
 * @param itemCount Number of items included at the root of the Review Link
 * @param items 
 * @param ownerId 
 * @param projectId 
 * @param reviewerCount 
 * @param shortUrl 
 * @param owner 
 * @param project 
 * @param team 
 * @param updatedAt 
 * @param viewCount 
 * @param watermarkUserInput 
 */
@Serializable

data class ReviewLink (

    /* Name of the Review Link */
    @SerialName(value = "name") @Required val name: kotlin.String,

    @SerialName(value = "access_control") val accessControl: ShareableEntityAccessControl? = null,

    @SerialName(value = "available_features") val availableFeatures: kotlin.String? = null,

    /* Enable/disable changing an Asset's status by non-Collaborator/Team Members via the Review Link. */
    @SerialName(value = "allow_approvals") val allowApprovals: kotlin.Boolean? = true,

    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "bundle_count") val bundleCount: kotlin.Int? = 0,

    /* Show **only** the most recent version of Assets in the Review Link */
    @SerialName(value = "current_version_only") val currentVersionOnly: kotlin.Boolean? = false,

    /* Deletion time of the Review Link */
    @SerialName(value = "deleted_at") val deletedAt: kotlinx.datetime.Instant? = null,

    /* Enable or disable downloading on this Review Link. The default depends on whether the auth used to create this review link allows for this or not. */
    @SerialName(value = "enable_downloading") val enableDownloading: kotlin.Boolean? = null,

    /* Expiration time of the Review Link */
    @SerialName(value = "expires_at") val expiresAt: kotlinx.datetime.Instant? = null,

    @SerialName(value = "enable_comments") val enableComments: kotlin.Boolean? = true,

    @SerialName(value = "folder_item_count") val folderItemCount: kotlin.Int? = 0,

    /* Disable an Review Link by switching this from `true` -> `false`, and vice-versa. */
    @SerialName(value = "is_active") val isActive: kotlin.Boolean? = true,

    @SerialName(value = "notify_on_view") val notifyOnView: kotlin.Boolean? = true,

    /* Actually a `passphrase`, this is an additional security measure for a second layer of security on your Review Links.    Supports alphanumeric input. */
    @SerialName(value = "password") val password: kotlin.String? = null,

    /* If false, the Review Link has no passphrase */
    @SerialName(value = "has_password") val hasPassword: kotlin.Boolean? = false,

    /* UUID of the Review Link */
    @SerialName(value = "id") val id: kotlin.String? = null,

    @SerialName(value = "inserted_at") val insertedAt: kotlinx.datetime.Instant? = null,

    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "is_autoplay") val isAutoplay: kotlin.Boolean? = false,

    /* Number of items included at the root of the Review Link */
    @SerialName(value = "item_count") val itemCount: kotlin.Int? = 0,

    @SerialName(value = "items") val items: kotlin.collections.List<ReviewLinkItem>? = null,

    @SerialName(value = "owner_id") val ownerId: kotlin.String? = null,

    @SerialName(value = "project_id") val projectId: kotlin.String? = null,

    @SerialName(value = "reviewer_count") val reviewerCount: kotlin.Int? = 0,

    @SerialName(value = "short_url") val shortUrl: kotlin.String? = null,

    @SerialName(value = "owner") val owner: User? = null,

    @SerialName(value = "project") val project: Project? = null,

    @SerialName(value = "team") val team: Team? = null,

    @SerialName(value = "updated_at") val updatedAt: kotlinx.datetime.Instant? = null,

    @SerialName(value = "view_count") val viewCount: kotlin.Int? = 0,

    /*  */
    @SerialName(value = "watermark_user_input") val watermarkUserInput: kotlin.String? = null

) {


}

