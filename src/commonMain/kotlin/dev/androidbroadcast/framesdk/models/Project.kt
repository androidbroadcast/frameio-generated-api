/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.models

import dev.androidbroadcast.framesdk.models.Asset
import dev.androidbroadcast.framesdk.models.ProjectPreferences
import dev.androidbroadcast.framesdk.models.Team
import dev.androidbroadcast.framesdk.models.UserPermissions
import dev.androidbroadcast.framesdk.models.Watermark

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param archiveStatus Archival status for this Project
 * @param archivedAt When a Project was archived
 * @param archivedFileCount 
 * @param archivedStorage 
 * @param collaboratorCount 
 * @param deletedAt If deleted, when this Project was deleted
 * @param description 
 * @param fileCount 
 * @param folderCount 
 * @param id 
 * @param ignoreArchive 
 * @param insertedAt When was this Project created
 * @param inviteUrl 
 * @param name Name of this Project
 * @param ownerId 
 * @param `private` 
 * @param projectPreferences 
 * @param readOnly 
 * @param rootAsset 
 * @param rootAssetId 
 * @param shared 
 * @param storage 
 * @param team 
 * @param teamId 
 * @param updatedAt 
 * @param userPermissions 
 * @param userPreferences 
 * @param watermark 
 */
@Serializable

data class Project (

    /* Archival status for this Project */
    @SerialName(value = "archive_status") val archiveStatus: Project.ArchiveStatus? = null,

    /* When a Project was archived */
    @SerialName(value = "archived_at") val archivedAt: kotlinx.datetime.Instant? = null,

    @SerialName(value = "archived_file_count") val archivedFileCount: kotlin.Int? = 0,

    @SerialName(value = "archived_storage") val archivedStorage: kotlin.Int? = 0,

    @SerialName(value = "collaborator_count") val collaboratorCount: kotlin.Int? = 0,

    /* If deleted, when this Project was deleted */
    @SerialName(value = "deleted_at") val deletedAt: kotlinx.datetime.Instant? = null,

    @SerialName(value = "description") val description: kotlin.String? = null,

    @SerialName(value = "file_count") val fileCount: kotlin.Int? = 0,

    @SerialName(value = "folder_count") val folderCount: kotlin.Int? = 0,

    @SerialName(value = "id") val id: kotlin.String? = null,

    @SerialName(value = "ignore_archive") val ignoreArchive: kotlin.Boolean? = false,

    /* When was this Project created */
    @SerialName(value = "inserted_at") val insertedAt: kotlinx.datetime.Instant? = null,

    @SerialName(value = "invite_url") val inviteUrl: kotlin.String? = null,

    /* Name of this Project */
    @SerialName(value = "name") val name: kotlin.String? = null,

    @SerialName(value = "owner_id") val ownerId: kotlin.String? = null,

    @SerialName(value = "private") val `private`: kotlin.Boolean? = false,

    @SerialName(value = "project_preferences") val projectPreferences: ProjectPreferences? = null,

    @SerialName(value = "read_only") val readOnly: kotlin.Boolean? = false,

    @SerialName(value = "root_asset") val rootAsset: Asset? = null,

    @SerialName(value = "root_asset_id") val rootAssetId: kotlin.String? = null,

    @SerialName(value = "shared") val shared: kotlin.Boolean? = false,

    @SerialName(value = "storage") val storage: kotlin.Int? = 0,

    @SerialName(value = "team") val team: Team? = null,

    @SerialName(value = "team_id") val teamId: kotlin.String? = null,

    @SerialName(value = "updated_at") val updatedAt: kotlinx.datetime.Instant? = null,

    @SerialName(value = "user_permissions") val userPermissions: UserPermissions? = null,

    @SerialName(value = "user_preferences") val userPreferences: ProjectPreferences? = null,

    @SerialName(value = "watermark") val watermark: Watermark? = null

) {

    /**
     * Archival status for this Project
     *
     * Values: standard,archiving,unarchiving,archived
     */
    @Serializable
    enum class ArchiveStatus(val value: kotlin.String) {
        @SerialName(value = "standard") standard("standard"),
        @SerialName(value = "archiving") archiving("archiving"),
        @SerialName(value = "unarchiving") unarchiving("unarchiving"),
        @SerialName(value = "archived") archived("archived");
    }

}

