/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.models

import dev.androidbroadcast.framesdk.models.DeviceAssetCreateDeprecatedRequestChannel
import dev.androidbroadcast.framesdk.models.DeviceAssetCreateDeprecatedRequestFilesize
import dev.androidbroadcast.framesdk.models.DeviceAssetCreateDeprecatedRequestParts

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param name The name the asset should have in Frame.io. This value does not have to match the name of the file on disk; it can be whatever you want it to be in Frame.io.  Required if `is_realtime_upload` is `false`.  If `is_realtime_upload` is `true`, must containa valid extension in the form of `\".[ext]\"`, unless `extension` is provided, in which case this field may be `null` or omitted.
 * @param extension Required when `is_realtime_upload` is `true`, when `name` is not known at time of asset creation. If `name` is provided, must match extension of that value.  Ignored when `is_realtime_upload` is `false`.  When supplied, asset will be creted with `name` value of `\"[new file].extension\"`.
 * @param filetype MIME type like `video/quicktime`. Many languages have built in utilities for detecting file mimetype (see Go and Python for examples).  Required if `is_realtime_upload` is `true`.
 * @param autoVersionId The asset you'd like this to be the next version of
 * @param isRealtimeUpload If `true`, File data for this asset is to be uploaded through the Real-time Uploads API.  If `false`, File data for this asset will be uploaded through the default API.  Must be `false` if `filetype` is not `file`.
 * @param filesize 
 * @param channel 
 * @param offset 
 * @param parts 
 */
@Serializable

data class DeviceAssetCreateDeprecatedRequest (

    /* The name the asset should have in Frame.io. This value does not have to match the name of the file on disk; it can be whatever you want it to be in Frame.io.  Required if `is_realtime_upload` is `false`.  If `is_realtime_upload` is `true`, must containa valid extension in the form of `\".[ext]\"`, unless `extension` is provided, in which case this field may be `null` or omitted. */
    @SerialName(value = "name") val name: kotlin.String? = "",

    /* Required when `is_realtime_upload` is `true`, when `name` is not known at time of asset creation. If `name` is provided, must match extension of that value.  Ignored when `is_realtime_upload` is `false`.  When supplied, asset will be creted with `name` value of `\"[new file].extension\"`. */
    @SerialName(value = "extension") val extension: kotlin.String? = null,

    /* MIME type like `video/quicktime`. Many languages have built in utilities for detecting file mimetype (see Go and Python for examples).  Required if `is_realtime_upload` is `true`. */
    @SerialName(value = "filetype") val filetype: kotlin.String? = null,

    /* The asset you'd like this to be the next version of */
    @SerialName(value = "auto_version_id") val autoVersionId: kotlin.String? = null,

    /* If `true`, File data for this asset is to be uploaded through the Real-time Uploads API.  If `false`, File data for this asset will be uploaded through the default API.  Must be `false` if `filetype` is not `file`. */
    @SerialName(value = "is_realtime_upload") val isRealtimeUpload: kotlin.Boolean? = false,

    @SerialName(value = "filesize") val filesize: DeviceAssetCreateDeprecatedRequestFilesize? = null,

    @SerialName(value = "channel") val channel: DeviceAssetCreateDeprecatedRequestChannel? = null,

    @SerialName(value = "offset") val offset: DeviceAssetCreateDeprecatedRequestFilesize? = null,

    @SerialName(value = "parts") val parts: DeviceAssetCreateDeprecatedRequestParts? = null

) {


}

