/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import dev.androidbroadcast.framesdk.apis.AuditLogsApi
import dev.androidbroadcast.framesdk.models.Audit
import dev.androidbroadcast.framesdk.models.AuditEvent
import dev.androidbroadcast.framesdk.models.HTTPError

class AuditLogsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AuditLogsApi
        //val apiInstance = AuditLogsApi()

        // to test getAccountAuditLogs
        should("test getAccountAuditLogs") {
            // uncomment below to test getAccountAuditLogs
            //val accountId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Account ID
            //val filtersStartDate : kotlinx.datetime.LocalDate = Mon Jun 03 03:00:00 MSK 2024 // kotlinx.datetime.LocalDate | Start ISO Date
            //val filtersEndDate : kotlinx.datetime.LocalDate = Tue Jun 18 03:00:00 MSK 2024 // kotlinx.datetime.LocalDate | End ISO Date
            //val filtersResourceType : kotlin.String = filtersResourceType_example // kotlin.String | Filter by Resource Type
            //val filtersEventType : kotlin.String = filtersEventType_example // kotlin.String | Filter by Type of Activity
            //val filtersTeamId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Filter by Team ID
            //val filtersProjectId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Filter by Project ID
            //val filtersResourceId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Filter by resource ID (Asset ID, Project ID, User ID)
            //val filtersUserId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Filter by User ID
            //val filtersIpAddress : kotlin.String = filtersIpAddress_example // kotlin.String | Filter by IP Address  This supports both IPv4 (`1.1.1.1`) and IPv6 (`2001:db8:3333:4444:5555:6666:7777:8888`)
            //val page : kotlin.Int = 56 // kotlin.Int | Page number
            //val pageSize : kotlin.Int = 56 // kotlin.Int | Records per page
            //val result : kotlin.collections.List<AuditEvent> = apiInstance.getAccountAuditLogs(accountId, filtersStartDate, filtersEndDate, filtersResourceType, filtersEventType, filtersTeamId, filtersProjectId, filtersResourceId, filtersUserId, filtersIpAddress, page, pageSize)
            //result shouldBe ("TODO")
        }

        // to test getAuditLogs
        should("test getAuditLogs") {
            // uncomment below to test getAuditLogs
            //val accountId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Account ID
            //val filterItemId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Filter by Item ID (Asset ID, Project ID, User ID)
            //val filterInsertedAtOp : kotlin.String = gt // kotlin.String | Filter by log datetime using logical operators
            //val filterInsertedAtValue : kotlinx.datetime.Instant = 2021-08-03T00:00Z // kotlinx.datetime.Instant | ISO Datetime
            //val filterItemType : kotlin.String = filterItemType_example // kotlin.String | Filter by Item Type
            //val filterAction : kotlin.String = filterAction_example // kotlin.String | Filter by Action
            //val filterActorId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Filter by Actor ID
            //val filterTeamId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Filter by Team ID
            //val filterIpAddress : kotlin.String = filterIpAddress_example // kotlin.String | Filter by IP Address  This supports both IPv4 (`1.1.1.1`) and IPv6 (`2001:db8:3333:4444:5555:6666:7777:8888`)
            //val page : kotlin.Int = 56 // kotlin.Int | Page number
            //val pageSize : kotlin.Int = 56 // kotlin.Int | Records per page
            //val result : kotlin.collections.List<Audit> = apiInstance.getAuditLogs(accountId, filterItemId, filterInsertedAtOp, filterInsertedAtValue, filterItemType, filterAction, filterActorId, filterTeamId, filterIpAddress, page, pageSize)
            //result shouldBe ("TODO")
        }

        // to test getUserAuditLogs
        should("test getUserAuditLogs") {
            // uncomment below to test getUserAuditLogs
            //val userId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | User ID
            //val filtersStartDate : kotlinx.datetime.LocalDate = Mon Jun 03 03:00:00 MSK 2024 // kotlinx.datetime.LocalDate | Start ISO Date
            //val filtersEndDate : kotlinx.datetime.LocalDate = Tue Jun 18 03:00:00 MSK 2024 // kotlinx.datetime.LocalDate | End ISO Date
            //val filtersResourceType : kotlin.String = filtersResourceType_example // kotlin.String | Filter by Resource Type
            //val filtersEventType : kotlin.String = filtersEventType_example // kotlin.String | Filter by Type of Activity
            //val filtersTeamId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Filter by Team ID
            //val filtersProjectId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Filter by Project ID
            //val filtersResourceId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Filter by resource ID (Asset ID, Project ID, User ID)
            //val filtersUserId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Filter by User ID
            //val filtersIpAddress : kotlin.String = filtersIpAddress_example // kotlin.String | Filter by IP Address
            //val page : kotlin.Int = 56 // kotlin.Int | Page number
            //val pageSize : kotlin.Int = 56 // kotlin.Int | Records per page
            //val result : kotlin.collections.List<AuditEvent> = apiInstance.getUserAuditLogs(userId, filtersStartDate, filtersEndDate, filtersResourceType, filtersEventType, filtersTeamId, filtersProjectId, filtersResourceId, filtersUserId, filtersIpAddress, page, pageSize)
            //result shouldBe ("TODO")
        }

    }
}
