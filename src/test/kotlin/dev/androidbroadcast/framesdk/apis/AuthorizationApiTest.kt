/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import dev.androidbroadcast.framesdk.apis.AuthorizationApi
import dev.androidbroadcast.framesdk.models.AuthDeviceConfirmDevice200Response
import dev.androidbroadcast.framesdk.models.AuthDeviceConfirmDevice400Response
import dev.androidbroadcast.framesdk.models.DeviceRequestCode200Response

class AuthorizationApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AuthorizationApi
        //val apiInstance = AuthorizationApi()

        // to test authDeviceConfirmDevice
        should("test authDeviceConfirmDevice") {
            // uncomment below to test authDeviceConfirmDevice
            //val grantType : kotlin.String = grantType_example // kotlin.String | The type of authorization grant our OAuth system is issuing.
            //val clientId : kotlin.String = clientId_example // kotlin.String | The unique device id, such as the device serial number. Must be the same as the client id used on the initiation request.
            //val deviceCode : kotlin.String = deviceCode_example // kotlin.String | The unique `device_code` generated by the server for this authorization attempt. Returned from the initiation request.
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val result : AuthDeviceConfirmDevice200Response = apiInstance.authDeviceConfirmDevice(grantType, clientId, deviceCode, xClientVersion)
            //result shouldBe ("TODO")
        }

        // to test authDeviceRefreshToken
        should("test authDeviceRefreshToken") {
            // uncomment below to test authDeviceRefreshToken
            //val clientId : kotlin.String = clientId_example // kotlin.String | Must be a unique identifier per hardware device, such as a unique hardware serial number. Must be the same as the client id used on initial authorization.
            //val clientSecret : kotlin.String = clientSecret_example // kotlin.String | A static string, provided by Frame.io to be embedded for a device manufacturer/model. Acts as an identifier within Frame.io.
            //val grantType : kotlin.String = grantType_example // kotlin.String | Grant type
            //val refreshTokem : kotlin.String = refreshTokem_example // kotlin.String | A valid `refresh_token`, from a previous authorization. Refresh tokens are valid for 14 days from issuance. This is received after the initial authorization and will receive a new `refresh-token` after every refresh.
            //apiInstance.authDeviceRefreshToken(clientId, clientSecret, grantType, refreshTokem)
        }

        // to test authDeviceRevokeToken
        should("test authDeviceRevokeToken") {
            // uncomment below to test authDeviceRevokeToken
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val clientId : kotlin.String = clientId_example // kotlin.String | Must be a unique identifier per hardware device, such as a unique hardware serial number. Must be the same `client_id` used on initial authorization.
            //val clientSecret : kotlin.String = clientSecret_example // kotlin.String | A static string, provided by Frame.io to be embedded for a device manufacturer/model. Acts as an identifier within Frame.io.
            //val token : kotlin.String = token_example // kotlin.String | 
            //val result : kotlin.String = apiInstance.authDeviceRevokeToken(xClientVersion, clientId, clientSecret, token)
            //result shouldBe ("TODO")
        }

        // to test deviceRequestCode
        should("test deviceRequestCode") {
            // uncomment below to test deviceRequestCode
            //val clientId : kotlin.String = clientId_example // kotlin.String | A unique identifier for the physical hardware device. This value needs to be guaranteed to be unique for the device. This could be a serial number or a randomly generated UUID.
            //val clientSecret : kotlin.String = clientSecret_example // kotlin.String | This will be issued to you by Frame.io support and identifies the your device model. This value should be kept secret from the user, and should be encrypted at rest
            //val scope : kotlin.String = scope_example // kotlin.String | The permissions we are requesting, with spaces used as delimiters. Hardware devices can only request the following two scopes
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val result : DeviceRequestCode200Response = apiInstance.deviceRequestCode(clientId, clientSecret, scope, xClientVersion)
            //result shouldBe ("TODO")
        }

    }
}
