/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import dev.androidbroadcast.framesdk.apis.CommentsApi
import dev.androidbroadcast.framesdk.models.Comment
import dev.androidbroadcast.framesdk.models.CommentImpression
import dev.androidbroadcast.framesdk.models.CreateCommentRequest
import dev.androidbroadcast.framesdk.models.HTTPError

class CommentsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of CommentsApi
        //val apiInstance = CommentsApi()

        // to test completeComment
        should("test completeComment") {
            // uncomment below to test completeComment
            //val commentId : kotlin.String = eefb57e0-79f2-4bc7-9b70-99fbc175175c // kotlin.String | Comment ID
            //val result : Comment = apiInstance.completeComment(commentId)
            //result shouldBe ("TODO")
        }

        // to test createComment
        should("test createComment") {
            // uncomment below to test createComment
            //val assetId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | 
            //val createCommentRequest : CreateCommentRequest =  // CreateCommentRequest | Comment to create or update
            //val result : Comment = apiInstance.createComment(assetId, createCommentRequest)
            //result shouldBe ("TODO")
        }

        // to test createCommentImpressionLike
        should("test createCommentImpressionLike") {
            // uncomment below to test createCommentImpressionLike
            //val commentId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | 
            //val result : kotlin.collections.List<CommentImpression> = apiInstance.createCommentImpressionLike(commentId)
            //result shouldBe ("TODO")
        }

        // to test createReply
        should("test createReply") {
            // uncomment below to test createReply
            //val commentId : kotlin.String = eefb57e0-79f2-4bc7-9b70-99fbc175175c // kotlin.String | Comment ID
            //val createCommentRequest : CreateCommentRequest =  // CreateCommentRequest | Comment to create or update
            //val result : Comment = apiInstance.createReply(commentId, createCommentRequest)
            //result shouldBe ("TODO")
        }

        // to test deleteComment
        should("test deleteComment") {
            // uncomment below to test deleteComment
            //val commentId : kotlin.String = eefb57e0-79f2-4bc7-9b70-99fbc175175c // kotlin.String | Comment ID
            //val result : Comment = apiInstance.deleteComment(commentId)
            //result shouldBe ("TODO")
        }

        // to test deleteCommentImpressionLike
        should("test deleteCommentImpressionLike") {
            // uncomment below to test deleteCommentImpressionLike
            //val commentId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | 
            //val result : kotlin.collections.List<CommentImpression> = apiInstance.deleteCommentImpressionLike(commentId)
            //result shouldBe ("TODO")
        }

        // to test getComment
        should("test getComment") {
            // uncomment below to test getComment
            //val commentId : kotlin.String = eefb57e0-79f2-4bc7-9b70-99fbc175175c // kotlin.String | Comment ID
            //val include : kotlin.String = include_example // kotlin.String | 
            //val result : Comment = apiInstance.getComment(commentId, include)
            //result shouldBe ("TODO")
        }

        // to test getCommentImpressions
        should("test getCommentImpressions") {
            // uncomment below to test getCommentImpressions
            //val commentId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | 
            //val include : kotlin.String = include_example // kotlin.String | 
            //val result : kotlin.collections.List<CommentImpression> = apiInstance.getCommentImpressions(commentId, include)
            //result shouldBe ("TODO")
        }

        // to test getComments
        should("test getComments") {
            // uncomment below to test getComments
            //val assetId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | 
            //val include : kotlin.String = include_example // kotlin.String | 
            //val result : kotlin.collections.List<Comment> = apiInstance.getComments(assetId, include)
            //result shouldBe ("TODO")
        }

        // to test getReplies
        should("test getReplies") {
            // uncomment below to test getReplies
            //val commentId : kotlin.String = eefb57e0-79f2-4bc7-9b70-99fbc175175c // kotlin.String | Comment ID
            //val include : kotlin.String = include_example // kotlin.String | 
            //val result : kotlin.collections.List<Comment> = apiInstance.getReplies(commentId, include)
            //result shouldBe ("TODO")
        }

        // to test uncompleteComment
        should("test uncompleteComment") {
            // uncomment below to test uncompleteComment
            //val commentId : kotlin.String = eefb57e0-79f2-4bc7-9b70-99fbc175175c // kotlin.String | Comment ID
            //val result : Comment = apiInstance.uncompleteComment(commentId)
            //result shouldBe ("TODO")
        }

        // to test updateComment
        should("test updateComment") {
            // uncomment below to test updateComment
            //val commentId : kotlin.String = eefb57e0-79f2-4bc7-9b70-99fbc175175c // kotlin.String | Comment ID
            //val createCommentRequest : CreateCommentRequest =  // CreateCommentRequest | Comment to create or update
            //val result : Comment = apiInstance.updateComment(commentId, createCommentRequest)
            //result shouldBe ("TODO")
        }

    }
}
