/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import dev.androidbroadcast.framesdk.apis.DevicesApi
import dev.androidbroadcast.framesdk.models.AuthDeviceConfirmDevice200Response
import dev.androidbroadcast.framesdk.models.AuthDeviceConfirmDevice400Response
import dev.androidbroadcast.framesdk.models.ConnectDeviceChannelRequest
import dev.androidbroadcast.framesdk.models.CreateAsset200Response
import dev.androidbroadcast.framesdk.models.CreateRealtimeUploadParts200Response
import dev.androidbroadcast.framesdk.models.CreateRealtimeUploadPartsRequest
import dev.androidbroadcast.framesdk.models.DeviceAssetCreateDeprecated409Response
import dev.androidbroadcast.framesdk.models.DeviceAssetCreateDeprecatedRequest
import dev.androidbroadcast.framesdk.models.DeviceAssetCreateDeprecatedRequest1
import dev.androidbroadcast.framesdk.models.DeviceListAccounts200ResponseInner
import dev.androidbroadcast.framesdk.models.DeviceListProjects200ResponseInner
import dev.androidbroadcast.framesdk.models.DeviceRequestCode200Response
import dev.androidbroadcast.framesdk.models.HTTPError
import dev.androidbroadcast.framesdk.models.ProjectDevice
import dev.androidbroadcast.framesdk.models.ProjectDeviceAuthorization
import dev.androidbroadcast.framesdk.models.ProjectDeviceChannel
import dev.androidbroadcast.framesdk.models.TriggerRealtimeLoggingEventRequest
import dev.androidbroadcast.framesdk.models.User

class DevicesApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of DevicesApi
        //val apiInstance = DevicesApi()

        // to test authDeviceConfirmDevice
        should("test authDeviceConfirmDevice") {
            // uncomment below to test authDeviceConfirmDevice
            //val grantType : kotlin.String = grantType_example // kotlin.String | The type of authorization grant our OAuth system is issuing.
            //val clientId : kotlin.String = clientId_example // kotlin.String | The unique device id, such as the device serial number. Must be the same as the client id used on the initiation request.
            //val deviceCode : kotlin.String = deviceCode_example // kotlin.String | The unique `device_code` generated by the server for this authorization attempt. Returned from the initiation request.
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val result : AuthDeviceConfirmDevice200Response = apiInstance.authDeviceConfirmDevice(grantType, clientId, deviceCode, xClientVersion)
            //result shouldBe ("TODO")
        }

        // to test authDeviceRefreshToken
        should("test authDeviceRefreshToken") {
            // uncomment below to test authDeviceRefreshToken
            //val clientId : kotlin.String = clientId_example // kotlin.String | Must be a unique identifier per hardware device, such as a unique hardware serial number. Must be the same as the client id used on initial authorization.
            //val clientSecret : kotlin.String = clientSecret_example // kotlin.String | A static string, provided by Frame.io to be embedded for a device manufacturer/model. Acts as an identifier within Frame.io.
            //val grantType : kotlin.String = grantType_example // kotlin.String | Grant type
            //val refreshTokem : kotlin.String = refreshTokem_example // kotlin.String | A valid `refresh_token`, from a previous authorization. Refresh tokens are valid for 14 days from issuance. This is received after the initial authorization and will receive a new `refresh-token` after every refresh.
            //apiInstance.authDeviceRefreshToken(clientId, clientSecret, grantType, refreshTokem)
        }

        // to test authDeviceRevokeToken
        should("test authDeviceRevokeToken") {
            // uncomment below to test authDeviceRevokeToken
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val clientId : kotlin.String = clientId_example // kotlin.String | Must be a unique identifier per hardware device, such as a unique hardware serial number. Must be the same `client_id` used on initial authorization.
            //val clientSecret : kotlin.String = clientSecret_example // kotlin.String | A static string, provided by Frame.io to be embedded for a device manufacturer/model. Acts as an identifier within Frame.io.
            //val token : kotlin.String = token_example // kotlin.String | 
            //val result : kotlin.String = apiInstance.authDeviceRevokeToken(xClientVersion, clientId, clientSecret, token)
            //result shouldBe ("TODO")
        }

        // to test connectDeviceChannel
        should("test connectDeviceChannel") {
            // uncomment below to test connectDeviceChannel
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val connectDeviceChannelRequest : ConnectDeviceChannelRequest =  // ConnectDeviceChannelRequest | Payload
            //val result : ProjectDeviceChannel = apiInstance.connectDeviceChannel(xClientVersion, connectDeviceChannelRequest)
            //result shouldBe ("TODO")
        }

        // to test deviceAssetCreate
        should("test deviceAssetCreate") {
            // uncomment below to test deviceAssetCreate
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val deviceAssetCreateDeprecatedRequest : DeviceAssetCreateDeprecatedRequest = {"name":"my_video.mp4","filetype":"video/mp4","is_realtime_upload":true,"channel":0,"offset":-10} // DeviceAssetCreateDeprecatedRequest | While supported, we encourage you to switch from `application/x-ww-form-urlencoded` to `application/json` in order to support future workflows that will only be supported through JSON.  When `is_realtime_upload` is `true`, call must be made in `application/json`.
            //val result : CreateAsset200Response = apiInstance.deviceAssetCreate(xClientVersion, deviceAssetCreateDeprecatedRequest)
            //result shouldBe ("TODO")
        }

        // to test deviceAssetCreateDeprecated
        should("test deviceAssetCreateDeprecated") {
            // uncomment below to test deviceAssetCreateDeprecated
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val deviceAssetCreateDeprecatedRequest : DeviceAssetCreateDeprecatedRequest = {"name":"my_video.mp4","filetype":"video/mp4","is_realtime_upload":true,"channel":0,"offset":-10} // DeviceAssetCreateDeprecatedRequest | While supported, we encourage you to switch from `application/x-ww-form-urlencoded` to `application/json` in order to support future workflows that will only be supported through JSON.  When `is_realtime_upload` is `true`, call must be made in `application/json`.
            //val result : CreateAsset200Response = apiInstance.deviceAssetCreateDeprecated(xClientVersion, deviceAssetCreateDeprecatedRequest)
            //result shouldBe ("TODO")
        }

        // to test deviceCreateRealtimeUploadParts
        should("test deviceCreateRealtimeUploadParts") {
            // uncomment below to test deviceCreateRealtimeUploadParts
            //val assetId : kotlin.String = 87817fee-e5b1-4aad-8165-2ee2bedd99cc // kotlin.String | Asset ID
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val createRealtimeUploadPartsRequest : CreateRealtimeUploadPartsRequest = {"parts":[{"number":1,"size":2000000000,"is_final":false},{"number":2,"size":1500000000,"is_final":false}]} // CreateRealtimeUploadPartsRequest | Enumerates parts that upload URLs should be created for.
            //val result : CreateRealtimeUploadParts200Response = apiInstance.deviceCreateRealtimeUploadParts(assetId, xClientVersion, createRealtimeUploadPartsRequest)
            //result shouldBe ("TODO")
        }

        // to test deviceHeartbeat
        should("test deviceHeartbeat") {
            // uncomment below to test deviceHeartbeat
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //apiInstance.deviceHeartbeat(xClientVersion)
        }

        // to test deviceIdentify
        should("test deviceIdentify") {
            // uncomment below to test deviceIdentify
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val result : ProjectDeviceAuthorization = apiInstance.deviceIdentify(xClientVersion)
            //result shouldBe ("TODO")
        }

        // to test deviceListAccounts
        should("test deviceListAccounts") {
            // uncomment below to test deviceListAccounts
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val result : kotlin.collections.Set<DeviceListAccounts200ResponseInner> = apiInstance.deviceListAccounts(xClientVersion)
            //result shouldBe ("TODO")
        }

        // to test deviceListProjects
        should("test deviceListProjects") {
            // uncomment below to test deviceListProjects
            //val accountId : kotlin.String = eefb57e0-79f2-4bc7-9b70-99fbc175175c // kotlin.String | Account ID
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val result : kotlin.collections.Set<DeviceListProjects200ResponseInner> = apiInstance.deviceListProjects(accountId, xClientVersion)
            //result shouldBe ("TODO")
        }

        // to test deviceProjectConnect
        should("test deviceProjectConnect") {
            // uncomment below to test deviceProjectConnect
            //val projectId : kotlin.String = projectId_example // kotlin.String | The `project_id` you intend to connect to
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val result : ProjectDevice = apiInstance.deviceProjectConnect(projectId, xClientVersion)
            //result shouldBe ("TODO")
        }

        // to test deviceProjectDisconnect
        should("test deviceProjectDisconnect") {
            // uncomment below to test deviceProjectDisconnect
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //apiInstance.deviceProjectDisconnect(xClientVersion)
        }

        // to test deviceRequestCode
        should("test deviceRequestCode") {
            // uncomment below to test deviceRequestCode
            //val clientId : kotlin.String = clientId_example // kotlin.String | A unique identifier for the physical hardware device. This value needs to be guaranteed to be unique for the device. This could be a serial number or a randomly generated UUID.
            //val clientSecret : kotlin.String = clientSecret_example // kotlin.String | This will be issued to you by Frame.io support and identifies the your device model. This value should be kept secret from the user, and should be encrypted at rest
            //val scope : kotlin.String = scope_example // kotlin.String | The permissions we are requesting, with spaces used as delimiters. Hardware devices can only request the following two scopes
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val result : DeviceRequestCode200Response = apiInstance.deviceRequestCode(clientId, clientSecret, scope, xClientVersion)
            //result shouldBe ("TODO")
        }

        // to test disconnectAllDeviceChannels
        should("test disconnectAllDeviceChannels") {
            // uncomment below to test disconnectAllDeviceChannels
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //apiInstance.disconnectAllDeviceChannels(xClientVersion)
        }

        // to test disconnectDeviceChannel
        should("test disconnectDeviceChannel") {
            // uncomment below to test disconnectDeviceChannel
            //val channelId : kotlin.String = channelId_example // kotlin.String | Device channel id
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //apiInstance.disconnectDeviceChannel(channelId, xClientVersion)
        }

        // to test getMe
        should("test getMe") {
            // uncomment below to test getMe
            //val result : User = apiInstance.getMe()
            //result shouldBe ("TODO")
        }

        // to test triggerRealtimeLoggingEvent
        should("test triggerRealtimeLoggingEvent") {
            // uncomment below to test triggerRealtimeLoggingEvent
            //val channelId : kotlin.String = 38400000-8cf0-11bd-b23e-10b96e4ef00d // kotlin.String | Device channel id
            //val inputIndex : kotlin.Int = 56 // kotlin.Int | An 0-indexed integer that will be used to identify the input
            //val xClientVersion : kotlin.String = 2.16.4 // kotlin.String | Firmware or software version of a C2C integration. Will be used to determine the correct Device Model configuration for the device when multiple are available. Must be a valid semantic version.    For more on semantic versions, see here: https://semver.org/
            //val triggerRealtimeLoggingEventRequest : TriggerRealtimeLoggingEventRequest =  // TriggerRealtimeLoggingEventRequest | 
            //apiInstance.triggerRealtimeLoggingEvent(channelId, inputIndex, xClientVersion, triggerRealtimeLoggingEventRequest)
        }

    }
}
