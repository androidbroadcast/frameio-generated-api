/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import dev.androidbroadcast.framesdk.models.ReviewLink
import dev.androidbroadcast.framesdk.models.Project
import dev.androidbroadcast.framesdk.models.ReviewLinkItem
import dev.androidbroadcast.framesdk.models.ShareableEntityAccessControl
import dev.androidbroadcast.framesdk.models.Team
import dev.androidbroadcast.framesdk.models.User

class ReviewLinkTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ReviewLink
        //val modelInstance = ReviewLink()

        // to test the property `name` - Name of the Review Link
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `accessControl`
        should("test accessControl") {
            // uncomment below to test the property
            //modelInstance.accessControl shouldBe ("TODO")
        }

        // to test the property `availableFeatures`
        should("test availableFeatures") {
            // uncomment below to test the property
            //modelInstance.availableFeatures shouldBe ("TODO")
        }

        // to test the property `allowApprovals` - Enable/disable changing an Asset's status by non-Collaborator/Team Members via the Review Link.
        should("test allowApprovals") {
            // uncomment below to test the property
            //modelInstance.allowApprovals shouldBe ("TODO")
        }

        // to test the property `bundleCount`
        should("test bundleCount") {
            // uncomment below to test the property
            //modelInstance.bundleCount shouldBe ("TODO")
        }

        // to test the property `currentVersionOnly` - Show **only** the most recent version of Assets in the Review Link
        should("test currentVersionOnly") {
            // uncomment below to test the property
            //modelInstance.currentVersionOnly shouldBe ("TODO")
        }

        // to test the property `deletedAt` - Deletion time of the Review Link
        should("test deletedAt") {
            // uncomment below to test the property
            //modelInstance.deletedAt shouldBe ("TODO")
        }

        // to test the property `enableDownloading` - Enable or disable downloading on this Review Link. The default depends on whether the auth used to create this review link allows for this or not.
        should("test enableDownloading") {
            // uncomment below to test the property
            //modelInstance.enableDownloading shouldBe ("TODO")
        }

        // to test the property `expiresAt` - Expiration time of the Review Link
        should("test expiresAt") {
            // uncomment below to test the property
            //modelInstance.expiresAt shouldBe ("TODO")
        }

        // to test the property `enableComments`
        should("test enableComments") {
            // uncomment below to test the property
            //modelInstance.enableComments shouldBe ("TODO")
        }

        // to test the property `folderItemCount`
        should("test folderItemCount") {
            // uncomment below to test the property
            //modelInstance.folderItemCount shouldBe ("TODO")
        }

        // to test the property `isActive` - Disable an Review Link by switching this from `true` -> `false`, and vice-versa.
        should("test isActive") {
            // uncomment below to test the property
            //modelInstance.isActive shouldBe ("TODO")
        }

        // to test the property `notifyOnView`
        should("test notifyOnView") {
            // uncomment below to test the property
            //modelInstance.notifyOnView shouldBe ("TODO")
        }

        // to test the property `password` - Actually a `passphrase`, this is an additional security measure for a second layer of security on your Review Links.    Supports alphanumeric input.
        should("test password") {
            // uncomment below to test the property
            //modelInstance.password shouldBe ("TODO")
        }

        // to test the property `hasPassword` - If false, the Review Link has no passphrase
        should("test hasPassword") {
            // uncomment below to test the property
            //modelInstance.hasPassword shouldBe ("TODO")
        }

        // to test the property `id` - UUID of the Review Link
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `insertedAt`
        should("test insertedAt") {
            // uncomment below to test the property
            //modelInstance.insertedAt shouldBe ("TODO")
        }

        // to test the property `isAutoplay`
        should("test isAutoplay") {
            // uncomment below to test the property
            //modelInstance.isAutoplay shouldBe ("TODO")
        }

        // to test the property `itemCount` - Number of items included at the root of the Review Link
        should("test itemCount") {
            // uncomment below to test the property
            //modelInstance.itemCount shouldBe ("TODO")
        }

        // to test the property `items`
        should("test items") {
            // uncomment below to test the property
            //modelInstance.items shouldBe ("TODO")
        }

        // to test the property `ownerId`
        should("test ownerId") {
            // uncomment below to test the property
            //modelInstance.ownerId shouldBe ("TODO")
        }

        // to test the property `projectId`
        should("test projectId") {
            // uncomment below to test the property
            //modelInstance.projectId shouldBe ("TODO")
        }

        // to test the property `reviewerCount`
        should("test reviewerCount") {
            // uncomment below to test the property
            //modelInstance.reviewerCount shouldBe ("TODO")
        }

        // to test the property `shortUrl`
        should("test shortUrl") {
            // uncomment below to test the property
            //modelInstance.shortUrl shouldBe ("TODO")
        }

        // to test the property `owner`
        should("test owner") {
            // uncomment below to test the property
            //modelInstance.owner shouldBe ("TODO")
        }

        // to test the property `project`
        should("test project") {
            // uncomment below to test the property
            //modelInstance.project shouldBe ("TODO")
        }

        // to test the property `team`
        should("test team") {
            // uncomment below to test the property
            //modelInstance.team shouldBe ("TODO")
        }

        // to test the property `updatedAt`
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

        // to test the property `viewCount`
        should("test viewCount") {
            // uncomment below to test the property
            //modelInstance.viewCount shouldBe ("TODO")
        }

        // to test the property `watermarkUserInput` - 
        should("test watermarkUserInput") {
            // uncomment below to test the property
            //modelInstance.watermarkUserInput shouldBe ("TODO")
        }

    }
}
