/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import dev.androidbroadcast.framesdk.models.AuditEvent

class AuditEventTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AuditEvent
        //val modelInstance = AuditEvent()

        // to test the property `accountId`
        should("test accountId") {
            // uncomment below to test the property
            //modelInstance.accountId shouldBe ("TODO")
        }

        // to test the property `anonymousUserId`
        should("test anonymousUserId") {
            // uncomment below to test the property
            //modelInstance.anonymousUserId shouldBe ("TODO")
        }

        // to test the property `client` - The API client the audit event was triggered by. This will not always be populated.  When the API call that produced an event was made via an OAuth app it will look like: `oauth_app/:uuid`, and if it was made via a developer token it will look like: `user_token/:uuid`, with the UUID being the User ID the token belongs to  Here are some examples:   - `user_token/57823879-e541-49b0-b902-c43794c4400c`  - `oauth_app/80ccf0bb-ae91-49c4-8aec-8f6238c14947`  - `web/2024-06-10-18-15`  - `pipeline-media-warden/cbd0061f6f190489e8af3137b8707b33f498f53f`  - `null`
        should("test client") {
            // uncomment below to test the property
            //modelInstance.client shouldBe ("TODO")
        }

        // to test the property `eventType`
        should("test eventType") {
            // uncomment below to test the property
            //modelInstance.eventType shouldBe ("TODO")
        }

        // to test the property `eventDetails` - The details for the event. This varies quite a bit from one type of event to another but there are some examples in the example responses.
        should("test eventDetails") {
            // uncomment below to test the property
            //modelInstance.eventDetails shouldBe ("TODO")
        }

        // to test the property `id` - Unique identifier
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `insertedAt`
        should("test insertedAt") {
            // uncomment below to test the property
            //modelInstance.insertedAt shouldBe ("TODO")
        }

        // to test the property `ipAddress` - The IP address associated with this event
        should("test ipAddress") {
            // uncomment below to test the property
            //modelInstance.ipAddress shouldBe ("TODO")
        }

        // to test the property `projectId` - The Project ID that this action occured in
        should("test projectId") {
            // uncomment below to test the property
            //modelInstance.projectId shouldBe ("TODO")
        }

        // to test the property `resourceId` - The ID of the referenced resource
        should("test resourceId") {
            // uncomment below to test the property
            //modelInstance.resourceId shouldBe ("TODO")
        }

        // to test the property `resourceType` - The type of the referenced resource
        should("test resourceType") {
            // uncomment below to test the property
            //modelInstance.resourceType shouldBe ("TODO")
        }

        // to test the property `teamId` - Team ID
        should("test teamId") {
            // uncomment below to test the property
            //modelInstance.teamId shouldBe ("TODO")
        }

        // to test the property `source` - The Source of the action that produced a given audit log entry
        should("test source") {
            // uncomment below to test the property
            //modelInstance.source shouldBe ("TODO")
        }

        // to test the property `userId` - User ID
        should("test userId") {
            // uncomment below to test the property
            //modelInstance.userId shouldBe ("TODO")
        }

        // to test the property `updatedAt`
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

    }
}
