/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import dev.androidbroadcast.framesdk.models.Asset
import dev.androidbroadcast.framesdk.models.AssetLabel
import dev.androidbroadcast.framesdk.models.MetadataFlags
import dev.androidbroadcast.framesdk.models.OneOfLessThanGreaterThan
import dev.androidbroadcast.framesdk.models.RequiredTranscodes
import dev.androidbroadcast.framesdk.models.User
import dev.androidbroadcast.framesdk.models.UserPermissions

class AssetTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Asset
        //val modelInstance = Asset()

        // to test the property `accountId` - Account ID this asset belongs to
        should("test accountId") {
            // uncomment below to test the property
            //modelInstance.accountId shouldBe ("TODO")
        }

        // to test the property `archiveFrom`
        should("test archiveFrom") {
            // uncomment below to test the property
            //modelInstance.archiveFrom shouldBe ("TODO")
        }

        // to test the property `archiveScheduledAt`
        should("test archiveScheduledAt") {
            // uncomment below to test the property
            //modelInstance.archiveScheduledAt shouldBe ("TODO")
        }

        // to test the property `archiveStatus`
        should("test archiveStatus") {
            // uncomment below to test the property
            //modelInstance.archiveStatus shouldBe ("TODO")
        }

        // to test the property `archivedAt`
        should("test archivedAt") {
            // uncomment below to test the property
            //modelInstance.archivedAt shouldBe ("TODO")
        }

        // to test the property `assetType`
        should("test assetType") {
            // uncomment below to test the property
            //modelInstance.assetType shouldBe ("TODO")
        }

        // to test the property `bundle`
        should("test bundle") {
            // uncomment below to test the property
            //modelInstance.bundle shouldBe ("TODO")
        }

        // to test the property `bundleView`
        should("test bundleView") {
            // uncomment below to test the property
            //modelInstance.bundleView shouldBe ("TODO")
        }

        // to test the property `coverAssetId`
        should("test coverAssetId") {
            // uncomment below to test the property
            //modelInstance.coverAssetId shouldBe ("TODO")
        }

        // to test the property `creator`
        should("test creator") {
            // uncomment below to test the property
            //modelInstance.creator shouldBe ("TODO")
        }

        // to test the property `frames` - The number of frames in this asset (really only useful for videos)
        should("test frames") {
            // uncomment below to test the property
            //modelInstance.frames shouldBe ("TODO")
        }

        // to test the property `hardDeletedAt` - Indicates the datetime this asset was hard deleted (30 days after soft-deletion)
        should("test hardDeletedAt") {
            // uncomment below to test the property
            //modelInstance.hardDeletedAt shouldBe ("TODO")
        }

        // to test the property `id` - The ID for this asset, can be used in places like `https://app.frame.io/player/:id` to go directly to an asset
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `index` - Represented within the Frame.io UI as the \"custom sort order\" within the grid view
        should("test index") {
            // uncomment below to test the property
            //modelInstance.index shouldBe ("TODO")
        }

        // to test the property `isBundleChild` - Indicates whether an asset is the child of a bundle asset
        should("test isBundleChild") {
            // uncomment below to test the property
            //modelInstance.isBundleChild shouldBe ("TODO")
        }

        // to test the property `isHlsRequired` - Indicates whether HLS is required to playback this asset
        should("test isHlsRequired") {
            // uncomment below to test the property
            //modelInstance.isHlsRequired shouldBe ("TODO")
        }

        // to test the property `isSessionWatermarked` - Indicates if this asset is subject to Session Based Watermarking (WMID)
        should("test isSessionWatermarked") {
            // uncomment below to test the property
            //modelInstance.isSessionWatermarked shouldBe ("TODO")
        }

        // to test the property `itemCount` - Applies only to folders and version stacks, indicates the number of items in that container
        should("test itemCount") {
            // uncomment below to test the property
            //modelInstance.itemCount shouldBe ("TODO")
        }

        // to test the property `label`
        should("test label") {
            // uncomment below to test the property
            //modelInstance.label shouldBe ("TODO")
        }

        // to test the property `metadata`
        should("test metadata") {
            // uncomment below to test the property
            //modelInstance.metadata shouldBe ("TODO")
        }

        // to test the property `metadataFlags`
        should("test metadataFlags") {
            // uncomment below to test the property
            //modelInstance.metadataFlags shouldBe ("TODO")
        }

        // to test the property `name` - Represents the name of the asset (filename)
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `original` - This is a URL to download the original asset, or in the event it's subject to watermarking but you still have permission to download - an asset that will be watermarked just-in-time as you download it
        should("test original") {
            // uncomment below to test the property
            //modelInstance.original shouldBe ("TODO")
        }

        // to test the property `parentAssetId` - The folder that this asset is in
        should("test parentAssetId") {
            // uncomment below to test the property
            //modelInstance.parentAssetId shouldBe ("TODO")
        }

        // to test the property `projectId` - The project ID that this asset belongs to
        should("test projectId") {
            // uncomment below to test the property
            //modelInstance.projectId shouldBe ("TODO")
        }

        // to test the property `properties` - Accepts arbitrary key/value pairs for storing information on an asset
        should("test properties") {
            // uncomment below to test the property
            //modelInstance.properties shouldBe ("TODO")
        }

        // to test the property `requiredTranscodes`
        should("test requiredTranscodes") {
            // uncomment below to test the property
            //modelInstance.requiredTranscodes shouldBe ("TODO")
        }

        // to test the property `teamId`
        should("test teamId") {
            // uncomment below to test the property
            //modelInstance.teamId shouldBe ("TODO")
        }

        // to test the property `userPermissions`
        should("test userPermissions") {
            // uncomment below to test the property
            //modelInstance.userPermissions shouldBe ("TODO")
        }

        // to test the property `type`
        should("test type") {
            // uncomment below to test the property
            //modelInstance.type shouldBe ("TODO")
        }

        // to test the property `viewCount` - Not a very helpful number, this really just represents the number of times this asset has been requested via the API
        should("test viewCount") {
            // uncomment below to test the property
            //modelInstance.viewCount shouldBe ("TODO")
        }

    }
}
