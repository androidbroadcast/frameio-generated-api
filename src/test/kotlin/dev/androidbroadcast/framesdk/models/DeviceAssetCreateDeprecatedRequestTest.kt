/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import dev.androidbroadcast.framesdk.models.DeviceAssetCreateDeprecatedRequest
import dev.androidbroadcast.framesdk.models.DeviceAssetCreateDeprecatedRequestChannel
import dev.androidbroadcast.framesdk.models.DeviceAssetCreateDeprecatedRequestFilesize
import dev.androidbroadcast.framesdk.models.DeviceAssetCreateDeprecatedRequestParts

class DeviceAssetCreateDeprecatedRequestTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of DeviceAssetCreateDeprecatedRequest
        //val modelInstance = DeviceAssetCreateDeprecatedRequest()

        // to test the property `name` - The name the asset should have in Frame.io. This value does not have to match the name of the file on disk; it can be whatever you want it to be in Frame.io.  Required if `is_realtime_upload` is `false`.  If `is_realtime_upload` is `true`, must containa valid extension in the form of `\".[ext]\"`, unless `extension` is provided, in which case this field may be `null` or omitted.
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `extension` - Required when `is_realtime_upload` is `true`, when `name` is not known at time of asset creation. If `name` is provided, must match extension of that value.  Ignored when `is_realtime_upload` is `false`.  When supplied, asset will be creted with `name` value of `\"[new file].extension\"`.
        should("test extension") {
            // uncomment below to test the property
            //modelInstance.extension shouldBe ("TODO")
        }

        // to test the property `filetype` - MIME type like `video/quicktime`. Many languages have built in utilities for detecting file mimetype (see Go and Python for examples).  Required if `is_realtime_upload` is `true`.
        should("test filetype") {
            // uncomment below to test the property
            //modelInstance.filetype shouldBe ("TODO")
        }

        // to test the property `autoVersionId` - The asset you'd like this to be the next version of
        should("test autoVersionId") {
            // uncomment below to test the property
            //modelInstance.autoVersionId shouldBe ("TODO")
        }

        // to test the property `isRealtimeUpload` - If `true`, File data for this asset is to be uploaded through the Real-time Uploads API.  If `false`, File data for this asset will be uploaded through the default API.  Must be `false` if `filetype` is not `file`.
        should("test isRealtimeUpload") {
            // uncomment below to test the property
            //modelInstance.isRealtimeUpload shouldBe ("TODO")
        }

        // to test the property `filesize`
        should("test filesize") {
            // uncomment below to test the property
            //modelInstance.filesize shouldBe ("TODO")
        }

        // to test the property `channel`
        should("test channel") {
            // uncomment below to test the property
            //modelInstance.channel shouldBe ("TODO")
        }

        // to test the property `offset`
        should("test offset") {
            // uncomment below to test the property
            //modelInstance.offset shouldBe ("TODO")
        }

        // to test the property `parts`
        should("test parts") {
            // uncomment below to test the property
            //modelInstance.parts shouldBe ("TODO")
        }

    }
}
