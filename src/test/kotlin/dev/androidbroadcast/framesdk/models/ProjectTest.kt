/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import dev.androidbroadcast.framesdk.models.Project
import dev.androidbroadcast.framesdk.models.Asset
import dev.androidbroadcast.framesdk.models.ProjectPreferences
import dev.androidbroadcast.framesdk.models.Team
import dev.androidbroadcast.framesdk.models.UserPermissions
import dev.androidbroadcast.framesdk.models.Watermark

class ProjectTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Project
        //val modelInstance = Project()

        // to test the property `archiveStatus` - Archival status for this Project
        should("test archiveStatus") {
            // uncomment below to test the property
            //modelInstance.archiveStatus shouldBe ("TODO")
        }

        // to test the property `archivedAt` - When a Project was archived
        should("test archivedAt") {
            // uncomment below to test the property
            //modelInstance.archivedAt shouldBe ("TODO")
        }

        // to test the property `archivedFileCount`
        should("test archivedFileCount") {
            // uncomment below to test the property
            //modelInstance.archivedFileCount shouldBe ("TODO")
        }

        // to test the property `archivedStorage`
        should("test archivedStorage") {
            // uncomment below to test the property
            //modelInstance.archivedStorage shouldBe ("TODO")
        }

        // to test the property `collaboratorCount`
        should("test collaboratorCount") {
            // uncomment below to test the property
            //modelInstance.collaboratorCount shouldBe ("TODO")
        }

        // to test the property `deletedAt` - If deleted, when this Project was deleted
        should("test deletedAt") {
            // uncomment below to test the property
            //modelInstance.deletedAt shouldBe ("TODO")
        }

        // to test the property `description`
        should("test description") {
            // uncomment below to test the property
            //modelInstance.description shouldBe ("TODO")
        }

        // to test the property `fileCount`
        should("test fileCount") {
            // uncomment below to test the property
            //modelInstance.fileCount shouldBe ("TODO")
        }

        // to test the property `folderCount`
        should("test folderCount") {
            // uncomment below to test the property
            //modelInstance.folderCount shouldBe ("TODO")
        }

        // to test the property `id`
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `ignoreArchive`
        should("test ignoreArchive") {
            // uncomment below to test the property
            //modelInstance.ignoreArchive shouldBe ("TODO")
        }

        // to test the property `insertedAt` - When was this Project created
        should("test insertedAt") {
            // uncomment below to test the property
            //modelInstance.insertedAt shouldBe ("TODO")
        }

        // to test the property `inviteUrl`
        should("test inviteUrl") {
            // uncomment below to test the property
            //modelInstance.inviteUrl shouldBe ("TODO")
        }

        // to test the property `name` - Name of this Project
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `ownerId`
        should("test ownerId") {
            // uncomment below to test the property
            //modelInstance.ownerId shouldBe ("TODO")
        }

        // to test the property ``private``
        should("test `private`") {
            // uncomment below to test the property
            //modelInstance.`private` shouldBe ("TODO")
        }

        // to test the property `projectPreferences`
        should("test projectPreferences") {
            // uncomment below to test the property
            //modelInstance.projectPreferences shouldBe ("TODO")
        }

        // to test the property `readOnly`
        should("test readOnly") {
            // uncomment below to test the property
            //modelInstance.readOnly shouldBe ("TODO")
        }

        // to test the property `rootAsset`
        should("test rootAsset") {
            // uncomment below to test the property
            //modelInstance.rootAsset shouldBe ("TODO")
        }

        // to test the property `rootAssetId`
        should("test rootAssetId") {
            // uncomment below to test the property
            //modelInstance.rootAssetId shouldBe ("TODO")
        }

        // to test the property `shared`
        should("test shared") {
            // uncomment below to test the property
            //modelInstance.shared shouldBe ("TODO")
        }

        // to test the property `storage`
        should("test storage") {
            // uncomment below to test the property
            //modelInstance.storage shouldBe ("TODO")
        }

        // to test the property `team`
        should("test team") {
            // uncomment below to test the property
            //modelInstance.team shouldBe ("TODO")
        }

        // to test the property `teamId`
        should("test teamId") {
            // uncomment below to test the property
            //modelInstance.teamId shouldBe ("TODO")
        }

        // to test the property `updatedAt`
        should("test updatedAt") {
            // uncomment below to test the property
            //modelInstance.updatedAt shouldBe ("TODO")
        }

        // to test the property `userPermissions`
        should("test userPermissions") {
            // uncomment below to test the property
            //modelInstance.userPermissions shouldBe ("TODO")
        }

        // to test the property `userPreferences`
        should("test userPreferences") {
            // uncomment below to test the property
            //modelInstance.userPreferences shouldBe ("TODO")
        }

        // to test the property `watermark`
        should("test watermark") {
            // uncomment below to test the property
            //modelInstance.watermark shouldBe ("TODO")
        }

    }
}
