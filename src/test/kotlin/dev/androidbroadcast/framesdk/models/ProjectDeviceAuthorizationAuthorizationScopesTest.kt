/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package dev.androidbroadcast.framesdk.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import dev.androidbroadcast.framesdk.models.ProjectDeviceAuthorizationAuthorizationScopes

class ProjectDeviceAuthorizationAuthorizationScopesTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProjectDeviceAuthorizationAuthorizationScopes
        //val modelInstance = ProjectDeviceAuthorizationAuthorizationScopes()

        // to test the property `accountRead`
        should("test accountRead") {
            // uncomment below to test the property
            //modelInstance.accountRead shouldBe ("TODO")
        }

        // to test the property `actionCreate`
        should("test actionCreate") {
            // uncomment below to test the property
            //modelInstance.actionCreate shouldBe ("TODO")
        }

        // to test the property `actionDelete`
        should("test actionDelete") {
            // uncomment below to test the property
            //modelInstance.actionDelete shouldBe ("TODO")
        }

        // to test the property `actionRead`
        should("test actionRead") {
            // uncomment below to test the property
            //modelInstance.actionRead shouldBe ("TODO")
        }

        // to test the property `actionUpdate`
        should("test actionUpdate") {
            // uncomment below to test the property
            //modelInstance.actionUpdate shouldBe ("TODO")
        }

        // to test the property `assetCreate`
        should("test assetCreate") {
            // uncomment below to test the property
            //modelInstance.assetCreate shouldBe ("TODO")
        }

        // to test the property `assetDelete`
        should("test assetDelete") {
            // uncomment below to test the property
            //modelInstance.assetDelete shouldBe ("TODO")
        }

        // to test the property `assetRead`
        should("test assetRead") {
            // uncomment below to test the property
            //modelInstance.assetRead shouldBe ("TODO")
        }

        // to test the property `assetUpdate`
        should("test assetUpdate") {
            // uncomment below to test the property
            //modelInstance.assetUpdate shouldBe ("TODO")
        }

        // to test the property `auditlogRead`
        should("test auditlogRead") {
            // uncomment below to test the property
            //modelInstance.auditlogRead shouldBe ("TODO")
        }

        // to test the property `commentCreate`
        should("test commentCreate") {
            // uncomment below to test the property
            //modelInstance.commentCreate shouldBe ("TODO")
        }

        // to test the property `commentDelete`
        should("test commentDelete") {
            // uncomment below to test the property
            //modelInstance.commentDelete shouldBe ("TODO")
        }

        // to test the property `commentRead`
        should("test commentRead") {
            // uncomment below to test the property
            //modelInstance.commentRead shouldBe ("TODO")
        }

        // to test the property `commentUpdate`
        should("test commentUpdate") {
            // uncomment below to test the property
            //modelInstance.commentUpdate shouldBe ("TODO")
        }

        // to test the property `deviceConnect`
        should("test deviceConnect") {
            // uncomment below to test the property
            //modelInstance.deviceConnect shouldBe ("TODO")
        }

        // to test the property `id`
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `offline`
        should("test offline") {
            // uncomment below to test the property
            //modelInstance.offline shouldBe ("TODO")
        }

        // to test the property `presentationCreate`
        should("test presentationCreate") {
            // uncomment below to test the property
            //modelInstance.presentationCreate shouldBe ("TODO")
        }

        // to test the property `presentationDelete`
        should("test presentationDelete") {
            // uncomment below to test the property
            //modelInstance.presentationDelete shouldBe ("TODO")
        }

        // to test the property `presentationRead`
        should("test presentationRead") {
            // uncomment below to test the property
            //modelInstance.presentationRead shouldBe ("TODO")
        }

        // to test the property `presentationUpdate`
        should("test presentationUpdate") {
            // uncomment below to test the property
            //modelInstance.presentationUpdate shouldBe ("TODO")
        }

        // to test the property `projectCreate`
        should("test projectCreate") {
            // uncomment below to test the property
            //modelInstance.projectCreate shouldBe ("TODO")
        }

        // to test the property `projectDelete`
        should("test projectDelete") {
            // uncomment below to test the property
            //modelInstance.projectDelete shouldBe ("TODO")
        }

        // to test the property `projectRead`
        should("test projectRead") {
            // uncomment below to test the property
            //modelInstance.projectRead shouldBe ("TODO")
        }

        // to test the property `projectUpdate`
        should("test projectUpdate") {
            // uncomment below to test the property
            //modelInstance.projectUpdate shouldBe ("TODO")
        }

        // to test the property `reviewlinkCreate`
        should("test reviewlinkCreate") {
            // uncomment below to test the property
            //modelInstance.reviewlinkCreate shouldBe ("TODO")
        }

        // to test the property `reviewlinkDelete`
        should("test reviewlinkDelete") {
            // uncomment below to test the property
            //modelInstance.reviewlinkDelete shouldBe ("TODO")
        }

        // to test the property `reviewlinkRead`
        should("test reviewlinkRead") {
            // uncomment below to test the property
            //modelInstance.reviewlinkRead shouldBe ("TODO")
        }

        // to test the property `reviewlinkUpdate`
        should("test reviewlinkUpdate") {
            // uncomment below to test the property
            //modelInstance.reviewlinkUpdate shouldBe ("TODO")
        }

        // to test the property `teamCreate`
        should("test teamCreate") {
            // uncomment below to test the property
            //modelInstance.teamCreate shouldBe ("TODO")
        }

        // to test the property `teamRead`
        should("test teamRead") {
            // uncomment below to test the property
            //modelInstance.teamRead shouldBe ("TODO")
        }

        // to test the property `teamUpdate`
        should("test teamUpdate") {
            // uncomment below to test the property
            //modelInstance.teamUpdate shouldBe ("TODO")
        }

        // to test the property `webhookCreate`
        should("test webhookCreate") {
            // uncomment below to test the property
            //modelInstance.webhookCreate shouldBe ("TODO")
        }

        // to test the property `webhookDelete`
        should("test webhookDelete") {
            // uncomment below to test the property
            //modelInstance.webhookDelete shouldBe ("TODO")
        }

        // to test the property `webhookRead`
        should("test webhookRead") {
            // uncomment below to test the property
            //modelInstance.webhookRead shouldBe ("TODO")
        }

        // to test the property `webhookUpdate`
        should("test webhookUpdate") {
            // uncomment below to test the property
            //modelInstance.webhookUpdate shouldBe ("TODO")
        }

    }
}
